[
  {
    "sequencer": {
      "name": "sub.chooseMaxStance",
      "orderedSelector": {
        "chooseMinMaxStancesForCoverAttack": [],
        "sequencer": {
          "chooseMaxStance": [],
          "orderedSelector": {
            "sequencer": {
              "isAgentPlayerBot": [],
              "setIntVar": {
                "to": "minStance",
                "value": 1
              }
            },
            "setIntVar": {
              "to": "minStance",
              "value": 0
            }
          }
        }
      }
    }
  },
  {
    "sequencer": {
      "name": "sub.deactivateWeapMod",
      "deactivateWeapMod": []
    }
  },
  {
    "sequencer": {
      "name": "sub.checkDowned",
      "isDowned": [],
      "recalculateTree": []
    }
  },
  {
    "sequencer": {
      "name": "sub.checkBurning",
      "isBurning": [],
      "recalculateTree": []
    }
  },
  {
    "sequencer": {
      "name": "sub.findCover",
      "getRegroupPos": {
        "posParam": "regroupPosition"
      },
      "getRegroupDistance": {
        "minDist": 8.0,
        "distParam": "regroupDistance"
      },
      "findCover": {
        "centerParam": "regroupPosition",
        "centerRadiusParam": "regroupDistance",
        "radius": 8.0,
        "dangerRadius": 0.0,
        "dangerMinNoiseLevel": 0.5,
        "coverPosParam": "coverPos"
      },
      "calcDistance": {
        "startPosParam": "coverPos",
        "endPosParam": "regroupPosition",
        "distanceParam": "coverRegroupDistance"
      },
      "checkDistance": {
        "posParam": "coverPos",
        "radiusParam": "coverRegroupDistance",
        "yRadius": 2.5
      },
      "copyPoint3Var": {
        "from": "coverPos",
        "to": "wishPosition"
      }
    }
  },
  {
    "sequencer": {
      "name": "sub.findCoverAroundLeader",
      "getRegroupPos": {
        "posParam": "regroupPosition"
      },
      "ifThenElse": [
        {
          "and": {
            "isSquadLeaderMoving": [],
            "isAggressiveBehaviour": []
          }
        },
        {
          "setRealVar": {
            "to": "possibleAngle",
            "value": 180.0
          }
        },
        {
          "setRealVar": {
            "to": "possibleAngle",
            "value": 80.0
          }
        }
      ],
      "orderedSelector": [
        {
          "findCoverAroundPoint": {
            "centerParam": "regroupPosition",
            "radius": 3.0,
            "possibleAngleParam": "possibleAngle",
            "coverPosParam": "coverPos",
            "minDist": 2.0,
            "maxOccupied": 3,
            "traceVisible": true
          }
        },
        {
          "findCoverAroundPoint": {
            "centerParam": "regroupPosition",
            "radius": 4.0,
            "possibleAngleParam": "possibleAngle",
            "coverPosParam": "coverPos",
            "minDist": 3.0,
            "maxOccupied": 2,
            "traceVisible": true
          }
        },
        {
          "findCoverAroundPoint": {
            "centerParam": "regroupPosition",
            "radius": 3.0,
            "possibleAngle": 180.0,
            "coverPosParam": "coverPos",
            "minDist": 1.0
          }
        }
      ],
      "copyPoint3Var": {
        "from": "coverPos",
        "to": "wishPosition"
      }
    }
  },
  {
    "sequencer": {
      "name": "sub.findCoverAroundLeaderAway",
      "getRegroupPos": {
        "posParam": "regroupPosition"
      },
      "getOrderPosition": {
        "posParam": "regroupPosition",
        "orderPosParam": "spreadPos",
        "traceVisible": true
      },
      "ifThenElse": [
        {
          "and": {
            "isSquadLeaderMoving": [],
            "isAggressiveBehaviour": []
          }
        },
        {
          "setRealVar": {
            "to": "possibleAngle",
            "value": 180.0
          }
        },
        {
          "setRealVar": {
            "to": "possibleAngle",
            "value": 100.0
          }
        }
      ],
      "orderedSelector": [
        {
          "findCoverAroundPoint": {
            "centerParam": "spreadPos",
            "radius": 5.0,
            "possibleAngleParam": "possibleAngle",
            "coverPosParam": "coverPos",
            "minDist": 0.0,
            "maxOccupied": 1,
            "traceVisible": true
          }
        },
        {
          "findCoverAroundPoint": {
            "centerParam": "spreadPos",
            "radius": 3.0,
            "possibleAngleParam": "possibleAngle",
            "coverPosParam": "coverPos",
            "minDist": 0.0,
            "maxOccupied": 2,
            "traceVisible": true
          }
        },
        {
          "findCoverAroundPoint": {
            "centerParam": "regroupPosition",
            "radius": 5.0,
            "possibleAngle": 180.0,
            "coverPosParam": "coverPos",
            "minDist": 3.0,
            "traceVisible": true
          }
        },
        {
          "findCoverAroundPoint": {
            "centerParam": "regroupPosition",
            "radius": 3.0,
            "possibleAngle": 180.0,
            "coverPosParam": "coverPos",
            "minDist": 2.0
          }
        }
      ],
      "copyPoint3Var": {
        "from": "coverPos",
        "to": "wishPosition"
      }
    }
  },
  {
    "sequencer": {
      "name": "sub.findCoverAroundPoint",
      "getRegroupPos": {
        "posParam": "regroupPosition"
      },
      "getOrderPosition": {
        "posParam": "regroupPosition",
        "orderPosParam": "spreadPos"
      },
      "orderedSelector": [
        {
          "findCoverAroundPoint": {
            "centerParam": "spreadPos",
            "radius": 7.0,
            "coverPosParam": "coverPos",
            "minDist": 0.0,
            "maxOccupied": 1,
            "traceVisible": true
          }
        },
        {
          "findCoverAroundPoint": {
            "centerParam": "spreadPos",
            "radius": 6.0,
            "coverPosParam": "coverPos",
            "minDist": 0.0,
            "maxOccupied": 2,
            "traceVisible": true
          }
        },
        {
          "findCoverAroundPoint": {
            "centerParam": "regroupPosition",
            "radius": 5.0,
            "possibleAngle": 180.0,
            "coverPosParam": "coverPos",
            "minDist": 2.0,
            "traceVisible": true
          }
        },
        {
          "findCoverAroundPoint": {
            "centerParam": "regroupPosition",
            "radius": 3.0,
            "possibleAngle": 180.0,
            "coverPosParam": "coverPos",
            "minDist": 2.0
          }
        }
      ],
      "copyPoint3Var": {
        "from": "coverPos",
        "to": "wishPosition"
      }
    }
  },
  {
    "sequencer": [
      {
        "name": "sub.checkCover"
      },
      {
        "checkCover": {
          "dangerRadius": 0.0,
          "dangerMinNoiseLevel": 0.5
        }
      },
      {
        "getCoverPosition": {
          "coverPosParam": "coverPos"
        }
      },
      {
        "checkAllowedPosition": {
          "posParam": "coverPos"
        }
      },
      {
        "getRegroupPos": {
          "posParam": "regroupPosition"
        }
      },
      {
        "getRegroupDistance": {
          "minDist": 8.0,
          "distParam": "regroupDistance"
        }
      },
      {
        "checkDistance": {
          "posParam": "regroupPosition",
          "otherPosParam": "coverPos",
          "radiusParam": "regroupDistance",
          "yRadius": 2.5
        }
      },
      {
        "checkDistance": {
          "posParam": "coverPos",
          "radiusParam": "coverRegroupDistance",
          "yRadius": 2.5
        }
      },
      {
        "calcDistance": {
          "startPosParam": "coverPos",
          "endPosParam": "regroupPosition",
          "distanceParam": "coverRegroupDistance"
        }
      },
      {
        "copyPoint3Var": {
          "from": "coverPos",
          "to": "wishPosition"
        }
      }
    ]
  },
  {
    "sequencer": {
      "name": "sub.checkCoverAroundPoint",
      "getCoverPosition": {
        "coverPosParam": "coverPos"
      },
      "checkAllowedPosition": {
        "posParam": "coverPos"
      },
      "getRegroupPos": {
        "posParam": "regroupPosition"
      },
      "getRegroupDistance": {
        "minDist": 8.0,
        "distParam": "regroupDistance"
      },
      "checkDistance": {
        "posParam": "regroupPosition",
        "otherPosParam": "coverPos",
        "radiusParam": "regroupDistance",
        "yRadius": 2.5
      },
      "copyPoint3Var": {
        "from": "coverPos",
        "to": "wishPosition"
      }
    }
  },
  {
    "sequencer": {
      "name": "sub.regroupCheck",
      "getRegroupPos": {
        "posParam": "regroupPosition"
      },
      "not": {
        "orderedSelector": {
          "sequencer": {
            "findDanger": {
              "paramName": "testEnemy",
              "radiusParamName": "enemyRadius",
              "minDanger": -1.0,
              "tag": "human"
            },
            "checkDistance": {
              "posParam": "regroupPosition",
              "otherPosParam": "storedRegroupPosition",
              "radius": 2.5,
              "yRadius": 2.5
            }
          },
          "checkDistance": {
            "posParam": "regroupPosition",
            "otherPosParam": "storedRegroupPosition",
            "radius": 8.0,
            "yRadius": 2.5
          }
        }
      },
      "copyPoint3Var": {
        "from": "regroupPosition",
        "to": "storedRegroupPosition"
      },
      "getOrderPosition": {
        "posParam": "regroupPosition",
        "orderPosParam": "wishPosition"
      }
    }
  },
  {
    "sequencer": {
      "name": "sub.changeStanceWhenInTheSquadLeaderAim",
      "findDanger": {
        "paramName": "testEnemy",
        "radiusParamName": "enemyRadius",
        "minDanger": -1.0,
        "tag": "human"
      },
      "isInSquadLeaderAim": [],
      "recalculateTree": []
    }
  },
  {
    "sequencer": {
      "name": "sub.moveTraceableDangerCheck",
      "isReadyForAction": {
        "checkFence": true
      },
      "periodicTimer": {
        "timeParam": "onTraceableDangerTimer",
        "timePeriod": [2.0,4.0]
      },
      "findDanger": {
        "paramName": "shootEnemy",
        "radiusParamName": "enemyRadius",
        "minDanger": 0.1,
        "tag": "human"
      },
      "increaseDangerLevel": {
        "paramName": "dangerLevel",
        "targetParam": "shootEnemy"
      },
      "decreaseDangerLevel": {
        "paramName": "dangerLevel",
        "decreaseCoef": 0.9
      },
      "decideOnAttackTarget": {
        "targetParam": "shootEnemy",
        "targetSeeTimeParam": "shootEnemyTime",
        "stillTimeOutParam": "attackStillTime",
        "turnAngleOutParam": "attackTurnAngle",
        "focusTimeOutParam": "attackFocusTime",
        "checkOnly": true
      },
      "recalculateTree": []
    }
  },
  {
    "sequencer": {
      "name": "sub.moveFindDangerCheck",
      "isReadyForAction": {
        "checkFence": true
      },
      "periodicTimer": {
        "timeParam": "onFollowPosFindDangerTimer",
        "timePeriod": [2.0,4.0]
      },
      "findDanger": {
        "paramName": "shootEnemy",
        "radiusParamName": "enemyRadius",
        "minDanger": 0.1,
        "tag": "human"
      },
      "recalculateTree": []
    }
  },
  {
    "sequencer": {
      "name": "sub.findDangerGrenade",
      "findDangerGrenade": {
        "grenTargetParam": "dangerLookAt",
        "radius": 20.0,
        "grenExplTime": "grenExplTime"
      },
      "recalculateTree": []
    }
  },
  {
    "sequencer": {
      "name": "sub.findDangerGrenadeNearby",
      "findDangerGrenade": {
        "grenTargetParam": "dangerLookAt",
        "radius": 10.0,
        "grenExplTime": "grenExplTime"
      },
      "recalculateTree": []
    }
  },
  {
    "sequencer": [
      {
        "name": "sub.grenadeEscape"
      },
      {
        "reaction": {
          "event": "regularCheck",
          "repeat": [
            {
              "count": 1
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.chooseMaxStance"
              }
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.deactivateWeapMod"
              }
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.checkDowned"
              }
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.checkBurning"
              }
            }
          ]
        }
      },
      {
        "findDangerGrenade": {
          "grenTargetParam": "dangerLookAt",
          "radius": 20.0,
          "grenExplTime": "grenExplTime"
        }
      },
      {
        "findSafeFromGrenadePos": {
          "posParam": "grenadeSafePos",
          "grenTargetParam": "dangerLookAt",
          "radius": 25.0
        }
      },
      {
        "speak": {
          "phrase": "grenadeAware",
          "timeMinMax": [4.0,10.0]
        }
      },
      {
        "setCurrentAiAction": {
          "state": "hide"
        }
      },
      {
        "wait": {
          "range": [0.1,0.3],
          "resetable": true
        }
      },
      {
        "wait": {
          "range": [0.2,0.4],
          "resetable": true
        }
      },
      {
        "moveToPos": {
          "posParam": "grenadeSafePos",
          "sprintTimerRange": [10.0,20.0],
          "minDistToSprint": 0.5,
          "tryClimbing": true,
          "maxStanceParam": "maxStance",
          "avoidAiObstacles": false
        }
      }
    ]
  },
  {
    "sequencer": [
      {
        "name": "sub.bombEscape"
      },
      {
        "reaction": {
          "event": "regularCheck",
          "repeat": [
            {
              "count": 1
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.chooseMaxStance"
              }
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.checkDowned"
              }
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.checkBurning"
              }
            }
          ]
        }
      },
      {
        "findDangerousBomb": {
          "dangerPosParam": "bombDangerousPos"
        }
      },
      {
        "findSafeFromBombPos": {
          "dangerPosParam": "bombDangerousPos",
          "safePosParam": "currentSafePos"
        }
      },
      {
        "setCurrentAiAction": {
          "state": "hide"
        }
      },
      {
        "wait": {
          "range": [0.1,0.3],
          "resetable": true
        }
      },
      {
        "wait": {
          "range": [0.8,1.2],
          "resetable": true
        }
      },
      {
        "moveToPos": {
          "posParam": "currentSafePos",
          "sprintTimerRange": [10.0,20.0],
          "minDistToSprint": 0.5,
          "tryClimbing": true,
          "maxStanceParam": "maxStance",
          "avoidAiObstacles": false
        }
      }
    ]
  },
  {
    "sequencer": {
      "name": "sub.rethrowGrenade",
      "isReadyForAction": [],
      "findDangerGrenade": {
        "grenTargetParam": "dangerLookAt",
        "radius": 2.5,
        "yRadius": 1.0,
        "allowUnderWater": false,
        "maxWaterDepth": 0.1,
        "grenExplTime": "grenExplTime"
      },
      "setCurrentAiAction": {
        "state": "attack"
      },
      "parallel": {
        "throwGrenadeBack": {
          "grenTargetParam": "dangerLookAt",
          "posParam": "grenadeThrowPos",
          "radius": 10.0,
          "minThrowDistance": 20.0
        },
        "sequencer": {
          "moveToPos": {
            "posParam": "grenadeThrowPos",
            "sprintTimerRange": [10.0,20.0],
            "minDistToSprint": 0.5,
            "tryClimbing": true,
            "distThreshold": 1.0,
            "avoidAiObstacles": false
          },
          "wait": {
            "range": [2.0,2.0],
            "resetable": true
          }
        }
      },
      "changeStance": {
        "stanceName": "crawl",
        "maxStanceParam": "maxStance"
      },
      "wait": {
        "range": [1.0,2.0],
        "resetable": true
      }
    }
  },
  {
    "sequencer": {
      "name": "sub.selfHealing",
      "isDowned": [],
      "setCurrentAiAction": {
        "state": "heal"
      },
      "wait": {
        "range": [0.2,0.5],
        "resetable": true
      },
      "useMedkit": []
    }
  },
  {
    "sequencer": [
      {
        "name": "sub.findDangerZone"
      },
      {
        "isVarsIntEqual": {
          "lhs": "dmgZoneEscaping",
          "rhs_value": 0
        }
      },
      {
        "periodicTimer": {
          "timeParam": "onDmgZoneDetectTimer",
          "timePeriod": [2.0,4.0]
        }
      },
      {
        "periodicTimer": {
          "timeParam": "onDmgZoneAlarmTimer",
          "timePeriod": [5.0,8.0]
        }
      },
      {
        "orderedSelector": {
          "findActiveDamageZone": {
            "safePosParam": "dmgZoneEscapePos"
          },
          "sequencer": {
            "isLeader": [],
            "isAgentPlayerBot": [],
            "findActiveDamageZone": {
              "safePosParam": "dmgZoneEscapePos",
              "findWarning": true
            },
            "not": {
              "isIndoor": []
            }
          }
        }
      },
      {
        "recalculateTree": []
      }
    ]
  },
  {
    "sequencer": {
      "name": "sub.selfExtinguish",
      "isBurning": [],
      "setCurrentAiAction": {
        "state": "heal"
      },
      "repeat": [
        {
          "count": 1
        },
        {
          "sequencer": {
            "isVarsIntEqual": {
              "lhs": "dmgZoneEscaping",
              "rhs_value": 0
            },
            "findActiveDamageZone": {
              "safePosParam": "dmgZoneEscapePos"
            },
            "exitHandler": {
              "sequencer": {
                "setIntVar": {
                  "to": "dmgZoneEscaping",
                  "value": 1
                },
                "parallel": {
                  "moveToPos": {
                    "posParam": "dmgZoneEscapePos",
                    "sprintTimerRange": [10.0,20.0],
                    "minDistToSprint": 0.5,
                    "tryClimbing": false,
                    "distThreshold": 1.0,
                    "avoidAiObstacles": false
                  },
                  "extinguish": []
                }
              },
              "setIntVar": {
                "to": "dmgZoneEscaping",
                "value": 0
              }
            }
          }
        },
        {
          "sequencer": {
            "reaction": {
              "event": "regularCheck",
              "subTree": {
                "name": "",
                "treeName": "sub.findDangerZone"
              }
            },
            "extinguish": []
          }
        }
      ]
    }
  },
  {
    "sequencer": {
      "name": "sub.dmgZoneEscape",
      "orderedSelector": {
        "findActiveDamageZone": {
          "safePosParam": "dmgZoneEscapePos"
        },
        "sequencer": [
          {
            "isLeader": []
          },
          {
            "isAgentPlayerBot": []
          },
          {
            "findActiveDamageZone": {
              "safePosParam": "dmgZoneEscapePos",
              "findWarning": true
            }
          },
          {
            "not": {
              "isIndoor": []
            }
          },
          {
            "copyPoint3Var": {
              "from": "regroupPosition",
              "to": "storedRegroupPosition"
            }
          },
          {
            "copyPoint3Var": {
              "from": "dmgZoneEscapePos",
              "to": "regroupPosition"
            }
          }
        ]
      },
      "periodicTimer": {
        "timeParam": "onDmgZoneEscapeTimer",
        "timePeriod": [3.0,5.0]
      },
      "exitHandler": {
        "sequencer": {
          "reaction": {
            "event": "regularCheck",
            "repeat": [
              {
                "count": 1
              },
              {
                "subTree": {
                  "name": "",
                  "treeName": "sub.swimUpCheck"
                }
              },
              {
                "subTree": {
                  "name": "",
                  "treeName": "sub.tryToOpenDoors"
                }
              }
            ]
          },
          "setIntVar": {
            "to": "dmgZoneEscaping",
            "value": 1
          },
          "setCurrentAiAction": {
            "state": "move"
          },
          "wait": {
            "range": [0.2,0.3],
            "resetable": true
          },
          "parallel": {
            "moveToPos": {
              "posParam": "dmgZoneEscapePos",
              "sprintTimerRange": [10.0,20.0],
              "minDistToSprint": 0.5,
              "tryClimbing": true,
              "distThreshold": 1.0,
              "avoidAiObstacles": false
            },
            "extinguish": []
          }
        },
        "setIntVar": {
          "to": "dmgZoneEscaping",
          "value": 0
        }
      }
    }
  },
  {
    "sequencer": {
      "name": "sub.swimUpCheck",
      "isUnderwater": [],
      "hasBreath": {
        "ratio": 0.5
      },
      "recalculateTree": []
    }
  },
  {
    "sequencer": {
      "name": "sub.swimUp",
      "reaction": {
        "event": "regularCheck",
        "findObstaclesAlongsidePath": []
      },
      "isUnderwater": [],
      "hasBreath": {
        "ratio": 0.5
      },
      "orderedSelector": [
        {
          "findSwimUpPos": {
            "posParam": "swimUpPos",
            "swimUpDirParam": "swimUpDir",
            "radius": 5.0,
            "tries": 1
          }
        },
        {
          "findSwimUpPos": {
            "posParam": "swimUpPos",
            "swimUpDirParam": "swimUpDir",
            "radius": 5.0,
            "tries": 10
          }
        }
      ],
      "setCurrentAiAction": {
        "state": "move"
      },
      "parallel": {
        "moveToPos": {
          "posParam": "swimUpPos",
          "sprintTimerRange": [10.0,20.0],
          "minDistToSprint": 10.0,
          "distThreshold": 1.5,
          "avoidAiObstacles": true
        },
        "waitSwimUpPos": {
          "delay": 0.1,
          "maxTime": 4.0,
          "swimUpDirParam": "swimUpDir"
        }
      },
      "swimUp": {
        "swimUpDirParam": "swimUpDir"
      }
    }
  },
  {
    "sequencer": {
      "name": "sub.enemyMelee",
      "findDanger": {
        "paramName": "meleeEnemy",
        "radiusParamName": "enemyMeleeRadius",
        "minDanger": 0.1,
        "tag": "human"
      },
      "getTime": {
        "to": "enemyNearTime"
      },
      "increaseDangerLevel": {
        "paramName": "dangerLevel",
        "targetParam": "meleeEnemy"
      },
      "setCurrentAiAction": {
        "state": "attack"
      },
      "moveToTarget": {
        "targetUnitParam": "meleeEnemy",
        "stopDist": 0.75,
        "aimToTarget": true,
        "maxStanceParam": "maxStance",
        "timeLimit": 3.0
      },
      "meleeAttack": {
        "targetUnitParam": "meleeEnemy",
        "timeToAttack": 1.0,
        "attackDist": 1.5
      },
      "wait": {
        "range": [0.5,1.0],
        "resetable": true
      }
    }
  },
  {
    "sequencer": [
      {
        "name": "sub.oneShootAttack"
      },
      {
        "reaction": {
          "event": "regularCheck",
          "repeat": [
            {
              "count": 1
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.chooseMaxStance"
              }
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.deactivateWeapMod"
              }
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.checkDowned"
              }
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.checkBurning"
              }
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.findDangerGrenade"
              }
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.findDangerZone"
              }
            },
            {
              "not": {
                "isGrenadeSelected": []
              }
            }
          ]
        }
      },
      {
        "reaction": {
          "event": "onEnemyPlayerNear",
          "orderedSelector": [
            {
              "not": {
                "isVarsIntEqual": {
                  "lhs": "coverAttack",
                  "rhs_value": 0
                }
              }
            },
            {
              "sequencer": {
                "findDanger": {
                  "paramName": "meleeEnemy",
                  "radiusParamName": "enemyMeleeRadius",
                  "minDanger": 0.5,
                  "tag": "human"
                },
                "recalculateTree": []
              }
            },
            {
              "sequencer": {
                "findDanger": {
                  "paramName": "shootEnemy",
                  "radiusParamName": "enemyNearRadius",
                  "minDanger": 0.5,
                  "tag": "human"
                },
                "orderedSelector": {
                  "isVarsIntEqual": {
                    "lhs": "prevShootEnemy",
                    "rhs": "shootEnemy"
                  },
                  "isGrenadeSelected": [],
                  "recalculateTree": []
                }
              }
            }
          ]
        }
      },
      {
        "setCurrentAiAction": {
          "state": "stand"
        }
      },
      {
        "setCurrentAiAction": {
          "state": "attack"
        }
      },
      {
        "orderedSelector": {
          "not": {
            "isVarsIntEqual": {
              "lhs": "coverAttack",
              "rhs_value": 0
            }
          },
          "checkAtTime": {
            "timeParam": "fastReactTime",
            "range": [0.0,5.0]
          },
          "decideOnAttackTarget": {
            "targetParam": "shootEnemy",
            "targetSeeTimeParam": "shootEnemyTime",
            "stillTimeOutParam": "attackStillTime",
            "turnAngleOutParam": "attackTurnAngle",
            "focusTimeOutParam": "attackFocusTime"
          },
          "failed": {
            "wait": {
              "range": [0.3,0.6],
              "resetable": true
            }
          }
        }
      },
      {
        "orderedSelector": {
          "not": {
            "isVarsIntEqual": {
              "lhs": "coverAttack",
              "rhs_value": 0
            }
          },
          "checkAtTime": {
            "timeParam": "fastReactTime",
            "range": [0.0,5.0]
          },
          "sequencer": [
            {
              "reaction": {
                "event": "regularCheck",
                "continue": []
              }
            },
            {
              "reaction": {
                "event": "onEnemyPlayerNear",
                "continue": []
              }
            },
            {
              "reaction": {
                "event": "onTraceableDanger",
                "continue": []
              }
            },
            {
              "wait": {
                "timeParam": "attackStillTime",
                "resetable": true
              }
            },
            {
              "sequencer": {
                "reaction": {
                  "event": "onBulletNearby",
                  "continue": []
                },
                "rotateToPoint": {
                  "angleParam": "attackTurnAngle",
                  "aimSpeedCoef": 0.777
                },
                "wait": {
                  "timeParam": "attackFocusTime",
                  "resetable": true
                }
              }
            }
          ]
        }
      },
      {
        "orderedSelector": [
          {
            "sequencer": {
              "isGrenadeSelected": [],
              "repeat": {
                "count": 1,
                "sequencer": {
                  "getRandomPointAroundTarget": {
                    "targetUnitParam": "shootEnemy",
                    "posParam": "posNearTarget",
                    "radiusRange": [3.0,6.0],
                    "awayMinRadius": 7.0,
                    "minDistanceFromAllies": 7.0
                  },
                  "rotateToPoint": {
                    "posParam": "posNearTarget"
                  },
                  "orderedSelector": {
                    "sequencer": [
                      {
                        "setIntVar": {
                          "to": "isInShootState",
                          "value": 1
                        }
                      },
                      {
                        "copyIntVar": {
                          "to": "prevShootEnemy",
                          "from": "shootEnemy"
                        }
                      },
                      {
                        "copyIntVar": {
                          "to": "rememberEnemy",
                          "from": "shootEnemy"
                        }
                      },
                      {
                        "throwGrenade": {
                          "targetPosParam": "posNearTarget",
                          "targetUnitParam": "shootEnemy",
                          "grenadeThrowDelay": 2.5
                        }
                      },
                      {
                        "wait": {
                          "range": [1.0,1.5],
                          "resetable": true
                        }
                      },
                      {
                        "getTime": {
                          "to": "rememberEnemyTime"
                        }
                      },
                      {
                        "setPosFromEntity": {
                          "to": "rememberEnemyPos",
                          "from": "shootEnemy"
                        }
                      }
                    ],
                    "resetGrenadeThrowTime": []
                  },
                  "chooseBestWeapon": {
                    "targetParam": "shootEnemy"
                  }
                }
              }
            }
          },
          {
            "sequencer": {
              "not": {
                "isGrenadeSelected": []
              },
              "repeat": {
                "count": 1,
                "sequencer": {
                  "getRandomPointNearTarget": {
                    "targetUnitParam": "shootEnemy",
                    "posParam": "posNearTarget",
                    "useGenerationByY": false
                  },
                  "rotateToPoint": {
                    "posParam": "posNearTarget"
                  },
                  "orderedSelector": [
                    {
                      "sequencer": {
                        "isMeleeWeaponSelected": [],
                        "copyIntVar": {
                          "to": "prevShootEnemy",
                          "from": "shootEnemy"
                        },
                        "getRandomPointAroundTarget": {
                          "targetUnitParam": "shootEnemy",
                          "posParam": "posNearTarget",
                          "radiusRange": [1.0,6.0],
                          "awayMinRadius": 0.0
                        },
                        "parallel": {
                          "wait": {
                            "range": [3.0,7.0],
                            "resetable": true
                          },
                          "moveToPos": {
                            "posParam": "posNearTarget",
                            "sprintTimerRange": [10.0,20.0],
                            "minDistToSprint": 0.0,
                            "distThreshold": 0.5,
                            "avoidAiObstacles": false,
                            "timeToStuck": 1.0
                          }
                        },
                        "moveToTarget": {
                          "targetUnitParam": "shootEnemy",
                          "stopDist": 0.75,
                          "aimToTarget": true,
                          "maxStanceParam": "maxStance",
                          "timeLimit": 3.0
                        },
                        "meleeAttack": {
                          "targetUnitParam": "shootEnemy",
                          "timeToAttack": 3.0,
                          "attackDist": 1.5
                        }
                      }
                    },
                    {
                      "sequencer": {
                        "setIntVar": {
                          "to": "isInShootState",
                          "value": 1
                        },
                        "copyIntVar": {
                          "to": "prevShootEnemy",
                          "from": "shootEnemy"
                        },
                        "orderedSelector": [
                          {
                            "sequencer": {
                              "isCurrentWeaponRequiresLongAiming": [],
                              "shootAtUnit": {
                                "targetUnitParam": "shootEnemy",
                                "minStanceParam": "minStance",
                                "shootCycles": 1,
                                "tryToSaveCurrentStance": false,
                                "minStanceChance": 1.5,
                                "shootTime": [1.0,1.0],
                                "cooldownTime": [0.9,1.5],
                                "minAimTime": [1.5,3.0],
                                "maxStanceParam": "maxStance",
                                "alwaysAiming": true,
                                "cyclesSuccess": true
                              }
                            }
                          },
                          {
                            "sequencer": {
                              "shootAtUnit": {
                                "targetUnitParam": "shootEnemy",
                                "minStanceParam": "minStance",
                                "shootCycles": 1,
                                "tryToSaveCurrentStance": false,
                                "minStanceChance": 1.5,
                                "shootTime": [0.2,1.0],
                                "cooldownTime": [0.2,0.9],
                                "minAimTime": [0.1,0.4],
                                "maxStanceParam": "maxStance",
                                "alwaysAiming": true,
                                "cyclesSuccess": true
                              },
                              "ignoreChance": {
                                "chance": 0.3
                              }
                            }
                          },
                          {
                            "sequencer": {
                              "setIntVar": {
                                "to": "coverAttack",
                                "value": 0
                              },
                              "break": []
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "getTime": {
                    "to": "rememberEnemyTime"
                  },
                  "copyIntVar": {
                    "to": "rememberEnemy",
                    "from": "shootEnemy"
                  },
                  "setPosFromEntity": {
                    "to": "rememberEnemyPos",
                    "from": "shootEnemy"
                  }
                }
              }
            }
          }
        ]
      },
      {
        "subTree": {
          "treeName": "sub.tryBeginCoverAttack"
        }
      },
      {
        "subTree": {
          "treeName": "sub.performCoverAttackMoves"
        }
      },
      {
        "increaseDangerLevel": {
          "paramName": "dangerLevel",
          "targetParam": "shootEnemy"
        }
      },
      {
        "decreaseDangerLevel": {
          "paramName": "dangerLevel",
          "decreaseCoef": 0.9
        }
      },
      {
        "not": {
          "isVarsIntEqual": {
            "lhs": "coverAttack",
            "rhs_value": 1
          }
        }
      },
      {
        "setIntVar": {
          "to": "isInShootState",
          "value": 0
        }
      },
      {
        "chooseBestWeapon": {
          "targetParam": "shootEnemy",
          "allowGrenades": true,
          "switchRadiusCoef": 0.85
        }
      }
    ]
  },
  {
    "sequencer": [
      {
        "name": "sub.attackVehicle"
      },
      {
        "initPeriodicTimer": {
          "timeParam": "onAttackVehicleTimer",
          "timePeriod": [5.0,8.0]
        }
      },
      {
        "reaction": {
          "event": "regularCheck",
          "repeat": [
            {
              "count": 1
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.chooseMaxStance"
              }
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.deactivateWeapMod"
              }
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.checkDowned"
              }
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.checkBurning"
              }
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.findDangerGrenade"
              }
            },
            {
              "subTree": {
                "name": "",
                "treeName": "sub.findDangerZone"
              }
            }
          ]
        }
      },
      {
        "reaction": {
          "event": "onEnemyPlayerNear",
          "sequencer": {
            "periodicTimer": {
              "timeParam": "onAttackVehicleTimer",
              "timePeriod": [5.0,8.0]
            },
            "orderedSelector": [
              {
                "sequencer": {
                  "findDanger": {
                    "paramName": "meleeEnemy",
                    "radiusParamName": "enemyMeleeRadius",
                    "minDanger": 0.5,
                    "tag": "human"
                  },
                  "recalculateTree": []
                }
              },
              {
                "sequencer": {
                  "findDanger": {
                    "paramName": "shootEnemy",
                    "radiusParamName": "enemyNearRadius",
                    "minDanger": 0.5,
                    "tag": "human"
                  },
                  "recalculateTree": []
                }
              }
            ]
          }
        }
      },
      {
        "increaseDangerLevel": {
          "paramName": "dangerLevel",
          "targetParam": "shootEnemy"
        }
      },
      {
        "setIntVar": {
          "to": "isInShootState",
          "value": 0
        }
      },
      {
        "chooseBestWeapon": {
          "targetParam": "shootEnemy"
        }
      },
      {
        "setCurrentAiAction": {
          "state": "attack"
        }
      },
      {
        "isGrenadeSelected": []
      },
      {
        "getRandomPointAroundTarget": {
          "targetUnitParam": "shootEnemy",
          "posParam": "posNearTarget",
          "radiusRange": [0.0,2.0],
          "awayMinRadius": 7.0,
          "minDistanceFromAllies": 7.0
        }
      },
      {
        "rotateToPoint": {
          "posParam": "posNearTarget"
        }
      },
      {
        "orderedSelector": [
          {
            "sequencer": {
              "setIntVar": {
                "to": "isInShootState",
                "value": 1
              },
              "throwGrenade": {
                "targetPosParam": "posNearTarget",
                "targetUnitParam": "shootEnemy",
                "minThrowDistance": 5.0
              },
              "wait": {
                "range": [0.5,1.0],
                "resetable": true
              }
            }
          },
          {
            "sequencer": {
              "resetAntiTankGrenadeThrowLimiter": [],
              "break": []
            }
          }
        ]
      }
    ]
  },
  {
    "sequencer": {
      "name": "sub.stayTraceableDangerCheck",
      "findDanger": {
        "paramName": "shootEnemy",
        "radiusParamName": "enemyRadius",
        "minDanger": 0.1,
        "tag": "human"
      },
      "recalculateTree": []
    }
  },
  {
    "sequencer": {
      "name": "sub.stayFindDangerCheck",
      "findDanger": {
        "paramName": "shootEnemy",
        "radiusParamName": "enemyRadius",
        "minDanger": 0.1,
        "tag": "human"
      },
      "recalculateTree": []
    }
  },
  {
    "sequencer": {
      "name": "sub.stayFindCover",
      "subTree": {
        "name": "",
        "refId": "findCoverRef"
      },
      "recalculateTree": []
    }
  },
  {
    "sequencer": {
      "name": "sub.stayRegroupCheck",
      "subTree": {
        "name": "",
        "treeName": "sub.regroupCheck"
      },
      "recalculateTree": []
    }
  },
  {
    "sequencer": {
      "name": "sub.tryCallArtillery",
      "isAgentPlayerBot": [],
      "checkAtTime": {
        "timeParam": "enemyNearTime",
        "range": [10.0,1000000.0]
      },
      "isReadyForAction": {
        "checkFence": true
      },
      "sequencer": [
        {
          "reaction": {
            "event": "onBulletNearby",
            "sequencer": {
              "recalculateTree": []
            }
          }
        },
        {
          "reaction": {
            "event": "onTraceableDanger",
            "continue": []
          }
        },
        {
          "reaction": {
            "event": "onEnemyPlayerNear",
            "sequencer": {
              "findDanger": {
                "paramName": "shootEnemy",
                "radiusParamName": "enemyNearRadius",
                "minDanger": 0.1,
                "tag": "human"
              },
              "recalculateTree": []
            }
          }
        },
        {
          "reaction": {
            "event": "regularCheck",
            "repeat": [
              {
                "count": 1
              },
              {
                "subTree": {
                  "name": "",
                  "treeName": "sub.checkDowned"
                }
              },
              {
                "subTree": {
                  "name": "",
                  "treeName": "sub.checkBurning"
                }
              },
              {
                "subTree": {
                  "name": "",
                  "treeName": "sub.swimUpCheck"
                }
              },
              {
                "subTree": {
                  "name": "",
                  "treeName": "sub.findDangerGrenadeNearby"
                }
              }
            ]
          }
        },
        {
          "not": {
            "findDanger": {
              "paramName": "shootEnemy",
              "radiusParamName": "enemyNearRadius",
              "minDanger": 0.5,
              "tag": "human"
            }
          }
        },
        {
          "tryCallArtillery": {
            "initRange": [30.0,90.0],
            "repeatRange": [240.0,360.0]
          }
        },
        {
          "wait": {
            "range": [0.5,1.5],
            "resetable": true
          }
        }
      ]
    }
  },
  {
    "sequencer": {
      "name": "sub.checkBuildAndPlace",
      "checkAtTime": {
        "timeParam": "enemyNearTime",
        "range": [5.0,1000000.0]
      },
      "isReadyForAction": {
        "checkFence": true
      },
      "isVarsIntEqual": {
        "lhs": "tryBuild",
        "rhs_value": 0
      },
      "periodicTimer": {
        "timeParam": "onCheckBuildTimer",
        "timePeriod": [3.0,7.0]
      },
      "ignoreChance": {
        "chance": 0.1
      },
      "orderedSelector": [
        {
          "sequencer": {
            "isEngineer": [],
            "orderedSelector": [
              {
                "sequencer": [
                  {
                    "checkBuildCustomRespawnPoint": {
                      "buildPosParam": "buildPos"
                    }
                  },
                  {
                    "setIntVar": {
                      "to": "tryBuild",
                      "value": 1
                    }
                  },
                  {
                    "setIntVar": {
                      "to": "buildWhat",
                      "value": 1
                    }
                  },
                  {
                    "initPeriodicTimer": {
                      "timeParam": "onForceBuildTimer",
                      "timePeriod": [5.0,7.0]
                    }
                  },
                  {
                    "recalculateTree": []
                  }
                ]
              },
              {
                "sequencer": [
                  {
                    "checkBuildAmmoBox": {
                      "buildPosParam": "buildPos"
                    }
                  },
                  {
                    "setIntVar": {
                      "to": "tryBuild",
                      "value": 1
                    }
                  },
                  {
                    "setIntVar": {
                      "to": "buildWhat",
                      "value": 2
                    }
                  },
                  {
                    "initPeriodicTimer": {
                      "timeParam": "onForceBuildTimer",
                      "timePeriod": [5.0,7.0]
                    }
                  },
                  {
                    "recalculateTree": []
                  }
                ]
              }
            ]
          }
        },
        {
          "sequencer": {
            "findWeaponSlotWithTag": {
              "tag": "medBox",
              "toParam": "buildToolSlot"
            },
            "orderedSelector": {
              "sequencer": [
                {
                  "checkPlaceMedBox": {
                    "buildPosParam": "buildPos"
                  }
                },
                {
                  "setIntVar": {
                    "to": "tryBuild",
                    "value": 1
                  }
                },
                {
                  "setIntVar": {
                    "to": "buildWhat",
                    "value": 3
                  }
                },
                {
                  "initPeriodicTimer": {
                    "timeParam": "onForceBuildTimer",
                    "timePeriod": [5.0,7.0]
                  }
                },
                {
                  "recalculateTree": []
                }
              ]
            }
          }
        }
      ]
    }
  },
  {
    "sequencer": {
      "name": "sub.tryBuildAndPlace",
      "checkAtTime": {
        "timeParam": "enemyNearTime",
        "range": [5.0,1000000.0]
      },
      "isReadyForAction": [],
      "exitHandler": {
        "sequencer": [
          {
            "reaction": {
              "event": "onBulletNearby",
              "sequencer": {
                "periodicTimer": {
                  "timeParam": "onForceBuildTimer",
                  "timePeriod": [3.0,5.0]
                },
                "recalculateTree": []
              }
            }
          },
          {
            "reaction": {
              "event": "onTraceableDanger",
              "continue": []
            }
          },
          {
            "reaction": {
              "event": "onEnemyPlayerNear",
              "sequencer": {
                "periodicTimer": {
                  "timeParam": "onForceBuildTimer",
                  "timePeriod": [3.0,5.0]
                },
                "findDanger": {
                  "paramName": "shootEnemy",
                  "radiusParamName": "enemyNearRadius",
                  "minDanger": 0.1,
                  "tag": "human"
                },
                "recalculateTree": []
              }
            }
          },
          {
            "reaction": {
              "event": "regularCheck",
              "repeat": [
                {
                  "count": 1
                },
                {
                  "subTree": {
                    "name": "",
                    "treeName": "sub.checkDowned"
                  }
                },
                {
                  "subTree": {
                    "name": "",
                    "treeName": "sub.checkBurning"
                  }
                },
                {
                  "subTree": {
                    "name": "",
                    "treeName": "sub.swimUpCheck"
                  }
                },
                {
                  "subTree": {
                    "name": "",
                    "treeName": "sub.tryToOpenDoors"
                  }
                },
                {
                  "subTree": {
                    "name": "",
                    "treeName": "sub.findDangerGrenadeNearby"
                  }
                }
              ]
            }
          },
          {
            "setCurrentAiAction": {
              "state": "move"
            }
          },
          {
            "orderedSelector": [
              {
                "sequencer": [
                  {
                    "isVarsIntEqual": {
                      "lhs": "buildWhat",
                      "rhs_value": 1
                    }
                  },
                  {
                    "isEngineer": []
                  },
                  {
                    "findWeaponSlotWithTag": {
                      "tag": "buildingTool",
                      "toParam": "buildToolSlot"
                    }
                  },
                  {
                    "moveToPos": {
                      "posParam": "buildPos",
                      "sprintTimerRange": [10.0,20.0],
                      "minDistToSprint": 4.0,
                      "distThreshold": 5.0,
                      "avoidAiObstacles": false,
                      "timeToStuck": 5.0,
                      "incLadders": true
                    }
                  },
                  {
                    "moveToPos": {
                      "posParam": "buildPos",
                      "sprintTimerRange": [10.0,20.0],
                      "minDistToSprint": 4.0,
                      "distThreshold": 1.5,
                      "avoidAiObstacles": false,
                      "timeToStuck": 5.0,
                      "incLadders": true
                    }
                  },
                  {
                    "changeWeapon": {
                      "param": "buildToolSlot"
                    }
                  },
                  {
                    "wait": {
                      "range": [0.5,1.0],
                      "resetable": true
                    }
                  },
                  {
                    "startBuildCustomRespawnPoint": {
                      "buildPosParam": "buildPos",
                      "buildTargetEidParam": "buildTarget",
                      "waitStartBuildMaxTime": 2.0
                    }
                  },
                  {
                    "subTree": {
                      "name": "",
                      "treeName": "sub.finishBuildTarget"
                    }
                  }
                ]
              },
              {
                "sequencer": {
                  "isVarsIntEqual": {
                    "lhs": "buildWhat",
                    "rhs_value": 2
                  },
                  "isEngineer": [],
                  "findWeaponSlotWithTag": {
                    "tag": "buildingTool",
                    "toParam": "buildToolSlot"
                  },
                  "changeWeapon": {
                    "param": "buildToolSlot"
                  },
                  "wait": {
                    "range": [0.5,1.5],
                    "resetable": true
                  },
                  "moveToPos": {
                    "posParam": "buildPos",
                    "sprintTimerRange": [10.0,20.0],
                    "minDistToSprint": 4.0,
                    "distThreshold": 1.1,
                    "avoidAiObstacles": false,
                    "timeToStuck": 5.0,
                    "incLadders": true
                  },
                  "startBuildAmmoBox": {
                    "buildPosParam": "buildPos",
                    "buildTargetEidParam": "buildTarget",
                    "waitStartBuildMaxTime": 2.0
                  },
                  "subTree": {
                    "name": "",
                    "treeName": "sub.finishBuildTarget"
                  }
                }
              },
              {
                "sequencer": {
                  "isVarsIntEqual": {
                    "lhs": "buildWhat",
                    "rhs_value": 3
                  },
                  "findWeaponSlotWithTag": {
                    "tag": "medBox",
                    "toParam": "buildToolSlot"
                  },
                  "changeWeapon": {
                    "param": "buildToolSlot"
                  },
                  "wait": {
                    "range": [0.5,1.5],
                    "resetable": true
                  },
                  "moveToPos": {
                    "posParam": "buildPos",
                    "sprintTimerRange": [10.0,20.0],
                    "minDistToSprint": 4.0,
                    "distThreshold": 1.1,
                    "avoidAiObstacles": false,
                    "timeToStuck": 5.0,
                    "incLadders": true
                  },
                  "placeMedBox": {
                    "buildPosParam": "buildPos"
                  }
                }
              }
            ]
          },
          {
            "wait": {
              "range": [0.5,1.5],
              "resetable": true
            }
          },
          {
            "wait": {
              "range": [1.0,2.0],
              "resetable": true
            }
          },
          {
            "chooseBestWeapon": {
              "targetParam": "shootEnemy"
            }
          }
        ],
        "chooseBestWeapon": {
          "targetParam": "shootEnemy"
        }
      }
    }
  },
  {
    "sequencer": {
      "name": "sub.checkHealTeammatesAround",
      "isReadyForAction": {
        "checkFence": true
      },
      "checkAtTime": {
        "timeParam": "enemyNearTime",
        "range": [5.0,1000000.0]
      },
      "periodicTimer": {
        "timeParam": "onCheckHealMatesTimer",
        "timePeriod": [2.0,3.0]
      },
      "checkHealTeammatesAround": {
        "healMateEidParam": "healMateEid",
        "checkAroundDistance": 20.0
      },
      "setIntVar": {
        "to": "tryHealMate",
        "value": 1
      },
      "recalculateTree": []
    }
  },
  {
    "sequencer": {
      "name": "sub.checkHealSquadmatesAround",
      "isReadyForAction": {
        "checkFence": true
      },
      "checkAtTime": {
        "timeParam": "enemyNearTime",
        "range": [5.0,1000000.0]
      },
      "periodicTimer": {
        "timeParam": "onCheckHealMatesTimer",
        "timePeriod": [2.0,3.0]
      },
      "checkHealTeammatesAround": {
        "healMateEidParam": "healMateEid",
        "checkAroundDistance": 20.0,
        "selfSquadOnly": true
      },
      "setIntVar": {
        "to": "tryHealMate",
        "value": 1
      },
      "recalculateTree": []
    }
  },
  {
    "sequencer": {
      "name": "sub.tryHealTeammateAround",
      "isReadyForAction": [],
      "isVarsIntEqual": {
        "lhs": "tryHealMate",
        "rhs_value": 1
      },
      "setIntVar": {
        "to": "tryHealMate",
        "value": 0
      },
      "checkTarget": {
        "targetUnitParam": "healMateEid"
      },
      "copyIntVar": {
        "to": "healRequester",
        "from": "healMateEid"
      },
      "subTree": {
        "name": "",
        "treeName": "sub.healReq"
      }
    }
  },
  {
    "sequencer": {
      "name": "sub.moveToRegroupPosition",
      "getRegroupPos": {
        "posParam": "regroupPosition"
      },
      "getOrderPosition": {
        "posParam": "regroupPosition",
        "orderPosParam": "wishPosition"
      },
      "subTree": {
        "name": "",
        "treeName": "sub.moveToPosition"
      }
    }
  },
  {
    "sequencer": {
      "name": "sub.moveToPosition",
      "wait": {
        "range": [0.1,0.3],
        "resetable": true
      },
      "getAgentAIPos": {
        "outPosParam": "moveFromPos"
      },
      "orderedSelector": [
        {
          "sequencer": [
            {
              "orderedSelector": {
                "isOnNavmesh": [],
                "subTree": {
                  "name": "",
                  "treeName": "sub.returnToNavmesh"
                }
              }
            },
            {
              "orderedSelector": [
                {
                  "moveToPos": {
                    "posParam": "wishPosition",
                    "sprintTimerRange": [10.0,20.0],
                    "minDistToSprint": 1.5,
                    "lookVisc": 0.1,
                    "tryClimbing": true,
                    "maxStanceParam": "maxStance",
                    "stuckDirParam": "stuckDir",
                    "incLadders": true,
                    "timeToStuck": 0.9,
                    "incObstacles": true,
                    "avoidAiObstacles": false,
                    "distThreshold": 1.0
                  }
                },
                {
                  "moveToPos": {
                    "posParam": "wishPosition",
                    "sprintTimerRange": [10.0,20.0],
                    "minDistToSprint": 1.5,
                    "lookVisc": 0.1,
                    "tryClimbing": true,
                    "maxStanceParam": "maxStance",
                    "stuckDirParam": "stuckDir",
                    "incLadders": true,
                    "timeToStuck": 0.9,
                    "incObstacles": false,
                    "avoidAiObstacles": false,
                    "distThreshold": 0.35
                  }
                }
              ]
            },
            {
              "setIntVar": {
                "to": "resetAIPointsGenerator",
                "value": 1
              }
            }
          ]
        },
        {
          "sequencer": {
            "success": {
              "sequencer": {
                "isUnderwater": [],
                "findSwimUpPos": {
                  "posParam": "swimUpPos",
                  "swimUpDirParam": "swimUpDir",
                  "radius": 1.0,
                  "tries": 5
                },
                "parallel": {
                  "moveToPos": {
                    "posParam": "swimUpPos",
                    "sprintTimerRange": [10.0,20.0],
                    "minDistToSprint": 10.0,
                    "distThreshold": 1.5,
                    "avoidAiObstacles": true
                  },
                  "waitSwimUpPos": {
                    "delay": 0.1,
                    "maxTime": 4.0,
                    "swimUpDirParam": "swimUpDir"
                  }
                },
                "swimUp": {
                  "swimUpDirParam": "swimUpDir"
                }
              }
            },
            "orderedSelector": [
              {
                "moveToPos": {
                  "posParam": "wishPosition",
                  "sprintTimerRange": [10.0,20.0],
                  "minDistToSprint": 1.5,
                  "lookVisc": 0.1,
                  "tryClimbing": true,
                  "maxStanceParam": "maxStance",
                  "stuckDirParam": "stuckDir",
                  "timeToStuck": 1.5,
                  "incObstacles": true,
                  "avoidAiObstacles": false,
                  "distThreshold": 1.0
                }
              },
              {
                "moveToPos": {
                  "posParam": "wishPosition",
                  "sprintTimerRange": [10.0,20.0],
                  "minDistToSprint": 1.5,
                  "lookVisc": 0.1,
                  "tryClimbing": true,
                  "maxStanceParam": "maxStance",
                  "stuckDirParam": "stuckDir",
                  "timeToStuck": 1.5,
                  "incObstacles": false,
                  "avoidAiObstacles": false,
                  "distThreshold": 0.35
                }
              }
            ],
            "setIntVar": {
              "to": "resetAIPointsGenerator",
              "value": 1
            }
          }
        },
        {
          "sequencer": {
            "or": {
              "isSwimming": [],
              "isUnderwater": []
            },
            "not": {
              "checkDistance": {
                "posParam": "wishPosition",
                "radius": 2.0,
                "yRadius": 1.0
              }
            },
            "orderedSelector": {
              "moveByDir": {
                "endPos": "wishPosition",
                "duration": 1.2,
                "distThresholsd": 0.2
              },
              "sequencer": {
                "findWayBackToNavmesh": {
                  "outPosParam": "outStuckPos"
                },
                "moveByDir": {
                  "endPos": "outStuckPos",
                  "duration": 1.2,
                  "distThresholsd": 0.2
                }
              }
            },
            "setIntVar": {
              "to": "resetAIPointsGenerator",
              "value": 1
            }
          }
        },
        {
          "isUnderwater": []
        },
        {
          "ifThenElse": [
            {
              "and": {
                "isOnNavmesh": [],
                "not": {
                  "isVarsIntEqual": {
                    "lhs": "resetAIPointsGenerator",
                    "rhs_value": 2
                  }
                }
              }
            },
            {
              "failed": {
                "subTree": {
                  "name": "",
                  "treeName": "sub.moveToUnstuck"
                }
              }
            },
            {
              "failed": {
                "subTree": {
                  "name": "",
                  "treeName": "sub.returnToNavmesh"
                }
              }
            }
          ]
        }
      ]
    }
  },
  {
    "sequencer": {
      "name": "sub.returnToNavmesh",
      "wait": {
        "range": [0.1,0.2],
        "resetable": true
      },
      "orderedSelector": {
        "sequencer": {
          "findWayBackToNavmesh": {
            "outPosParam": "outStuckPos"
          },
          "moveByDir": {
            "endPos": "outStuckPos",
            "duration": 1.2,
            "distThresholsd": 0.1
          },
          "setIntVar": {
            "to": "resetAIPointsGenerator",
            "value": 1
          }
        },
        "setIntVar": {
          "to": "resetAIPointsGenerator",
          "value": 1
        }
      }
    }
  },
  {
    "sequencer": {
      "name": "sub.moveToUnstuck",
      "wait": {
        "range": [0.1,0.2],
        "resetable": true
      },
      "orderedSelector": {
        "sequencer": {
          "getPointAroundAIPos": {
            "dirParam": "stuckDir",
            "outPosParam": "outStuckPos",
            "forwPosParam": "outStuckForwPos",
            "fromPosParam": "moveFromPos",
            "toPosParam": "wishPosition",
            "resetAIPointsGeneratorParam": "resetAIPointsGenerator"
          },
          "moveByDir": {
            "endPos": "outStuckPos",
            "duration": 1.5,
            "distThresholsd": 0.1
          }
        },
        "setIntVar": {
          "to": "resetAIPointsGenerator",
          "value": 2
        }
      }
    }
  },
  {
    "sequencer": [
      {
        "name": "sub.stayInCover"
      },
      {
        "isInCover": []
      },
      {
        "setCurrentAiAction": {
          "state": "in_cover"
        }
      },
      {
        "getCoverPosition": {
          "coverPosParam": "coverPos"
        }
      },
      {
        "chooseMaxStance": []
      },
      {
        "orderedSelector": [
          {
            "sequencer": {
              "findDanger": {
                "paramName": "testEnemy",
                "radiusParamName": "enemyRadius",
                "minDanger": -1.0,
                "tag": "human"
              },
              "selectStanceInCover": {
                "minStanceParam": "minStance",
                "maxStanceParam": "maxStance",
                "stanceParam": "coverStance",
                "safe": true
              },
              "changeStance": {
                "stanceName": "stand",
                "maxStanceParam": "coverStance"
              }
            }
          },
          {
            "sequencer": {
              "chooseRandomStance": {
                "stanceParam": "standStance",
                "minStance": 1,
                "maxStance": 2
              },
              "changeStance": {
                "stanceName": "stand",
                "maxStanceParam": "standStance"
              }
            }
          }
        ]
      },
      {
        "orderedSelector": {
          "findPotentialEnemyPos": {
            "posParam": "potentialEnemyPos",
            "minNoiseLevel": 3.0
          },
          "sequencer": {
            "periodicTimer": {
              "timeParam": "standInCoverFindDangerAttrationPosTimer",
              "timePeriod": [4.0,6.0]
            },
            "findDangerAttractionPos": {
              "posParam": "potentialEnemyPos",
              "radius": 0.0,
              "minNoiseLevel": 3.0
            }
          },
          "continue": []
        }
      },
      {
        "orderedSelector": {
          "not": {
            "passedTimeSinceControlledByPlayer": {
              "time": 30.0
            }
          },
          "checkReloadWeapon": {
            "waitReloadFinish": false,
            "enoughAmmoRatio": 0.9,
            "skipEnemyNearRadius": 10.0
          }
        }
      },
      {
        "orderedSelector": [
          {
            "sequencer": {
              "ignoreChance": {
                "chance": 0.1
              },
              "checkAtTime": {
                "timeParam": "rememberEnemyTime",
                "range": [0.0,25.0]
              },
              "checkTarget": {
                "targetUnitParam": "rememberEnemy"
              },
              "copyPoint3Var": {
                "to": "potentialEnemyPos",
                "from": "rememberEnemyPos"
              },
              "fixLookDirPos": {
                "posParam": "potentialEnemyPos"
              },
              "parallel": {
                "wait": {
                  "range": [5.0,10.0],
                  "resetable": true
                },
                "wanderLook": {
                  "posParam": "potentialEnemyPos",
                  "range": [0.2,0.1],
                  "maxStanceParam": "coverStance"
                },
                "subTree": {
                  "treeName": "sub.cycleCheckAllowedPos"
                }
              }
            }
          },
          {
            "sequencer": {
              "findPotentialEnemyDirectionEntryPoint": {
                "posParam": "potentialEnemyPos"
              },
              "fixLookDirPos": {
                "posParam": "potentialEnemyPos"
              },
              "parallel": {
                "wait": {
                  "range": [5.0,15.0],
                  "resetable": true
                },
                "wanderLook": {
                  "posParam": "potentialEnemyPos",
                  "range": [0.2,0.1],
                  "maxStanceParam": "coverStance"
                },
                "subTree": {
                  "treeName": "sub.cycleCheckAllowedPos"
                }
              }
            }
          }
        ]
      }
    ]
  },
  {
    "sequencer": [
      {
        "name": "sub.stayAtPos"
      },
      {
        "setCurrentAiAction": {
          "state": "stand"
        }
      },
      {
        "fixLookDirPos": {
          "posParam": "potentialEnemyPos"
        }
      },
      {
        "fixLookDirPos": {
          "posParam": "potentialEnemyPos"
        }
      },
      {
        "parallel": {
          "validateStandPosition": [],
          "wanderLook": {
            "posParam": "potentialEnemyPos",
            "range": [0.2,0.1],
            "maxStanceParam": "maxStance"
          },
          "subTree": {
            "treeName": "sub.cycleCheckAllowedPos"
          }
        }
      },
      {
        "parallel": {
          "validateStandPosition": [],
          "wanderLook": {
            "posParam": "potentialEnemyPos",
            "range": [0.2,0.1],
            "maxStanceParam": "maxStance"
          },
          "subTree": {
            "treeName": "sub.cycleCheckAllowedPos"
          }
        }
      },
      {
        "parallel": {
          "wait": {
            "range": [1.5,2.0],
            "resetable": true
          },
          "wanderLook": {
            "posParam": "potentialEnemyPos",
            "range": [0.2,0.1],
            "maxStanceParam": "maxStance"
          },
          "subTree": {
            "treeName": "sub.cycleCheckAllowedPos"
          }
        }
      },
      {
        "orderedSelector": {
          "findPotentialEnemyPos": {
            "posParam": "potentialEnemyPos",
            "minNoiseLevel": 3.0
          },
          "sequencer": {
            "periodicTimer": {
              "timeParam": "standFindDangerAttrationPosTimer",
              "timePeriod": [4.0,6.0]
            },
            "findDangerAttractionPos": {
              "posParam": "potentialEnemyPos",
              "radius": 0.0,
              "minNoiseLevel": 3.0
            }
          },
          "continue": []
        }
      },
      {
        "orderedSelector": [
          {
            "sequencer": {
              "ignoreChance": {
                "chance": 0.5
              },
              "chooseRandomStance": {
                "stanceParam": "standStance",
                "minStance": 1,
                "maxStance": 2
              },
              "changeStance": {
                "stanceName": "stand",
                "maxStanceParam": "standStance"
              }
            }
          },
          {
            "sequencer": {
              "ignoreChance": {
                "chance": 0.95
              },
              "chooseRandomStance": {
                "stanceParam": "standStance",
                "minStance": 0,
                "maxStance": 1
              },
              "changeStance": {
                "stanceName": "stand",
                "maxStanceParam": "standStance"
              }
            }
          },
          {
            "continue": []
          }
        ]
      },
      {
        "orderedSelector": {
          "not": {
            "passedTimeSinceControlledByPlayer": {
              "time": 30.0
            }
          },
          "checkReloadWeapon": {
            "waitReloadFinish": false,
            "enoughAmmoRatio": 0.8,
            "skipEnemyNearRadius": 10.0
          }
        }
      },
      {
        "orderedSelector": [
          {
            "sequencer": {
              "ignoreChance": {
                "chance": 0.2
              },
              "checkAtTime": {
                "timeParam": "rememberEnemyTime",
                "range": [0.0,20.0]
              },
              "checkTarget": {
                "targetUnitParam": "rememberEnemy"
              },
              "copyPoint3Var": {
                "to": "potentialEnemyPos",
                "from": "rememberEnemyPos"
              },
              "fixLookDirPos": {
                "posParam": "potentialEnemyPos"
              },
              "parallel": {
                "wait": {
                  "range": [5.0,10.0],
                  "resetable": true
                },
                "wanderLook": {
                  "posParam": "potentialEnemyPos",
                  "range": [0.2,0.1],
                  "maxStanceParam": "coverStance"
                },
                "subTree": {
                  "treeName": "sub.cycleCheckAllowedPos"
                }
              }
            }
          },
          {
            "sequencer": {
              "findPotentialEnemyDirectionEntryPoint": {
                "posParam": "potentialEnemyPos"
              },
              "fixLookDirPos": {
                "posParam": "potentialEnemyPos"
              },
              "parallel": {
                "wait": {
                  "range": [5.0,15.0],
                  "resetable": true
                },
                "wanderLook": {
                  "posParam": "potentialEnemyPos",
                  "range": [0.2,0.1],
                  "maxStanceParam": "maxStance"
                },
                "subTree": {
                  "treeName": "sub.cycleCheckAllowedPos"
                }
              }
            }
          }
        ]
      },
      {
        "sequencer": {
          "ignoreChance": {
            "chance": 0.5
          },
          "chooseRandomStance": {
            "stanceParam": "standStance",
            "minStance": 1,
            "maxStance": 2
          },
          "changeStance": {
            "stanceName": "stand",
            "maxStanceParam": "standStance"
          }
        }
      }
    ]
  },
  {
    "sequencer": [
      {
        "name": "sub.moveToCover"
      },
      {
        "subTree": {
          "name": "",
          "treeName": "sub.tryToSaveOrFindCover"
        }
      },
      {
        "subTree": {
          "name": "",
          "treeName": "sub.moveToPosition"
        }
      }
    ]
  },
  {
    "sequencer": [
      {
        "name": "sub.defendPointMoveToPosition"
      },
      {
        "setIntVar": {
          "to": "isOnDefendPoint",
          "value": 0
        }
      },
      {
        "setIntVar": {
          "to": "isOnDefendPoint",
          "value": 1
        }
      },
      {
        "subTree": {
          "treeName": "sub.moveToRegroupPosition"
        }
      }
    ]
  },
  {
    "sequencer": [
      {
        "name": "sub.updateRegroupPosDefault"
      },
      {
        "isLeader": []
      },
      {
        "success": {
          "setSquadFormation": {
            "formation": "standard"
          }
        }
      },
      {
        "orderedSelector": {
          "sequencer": {
            "findDanger": {
              "paramName": "testEnemy",
              "radiusParamName": "enemyNearRadius",
              "minDanger": -1.0,
              "tag": "human"
            },
            "periodicTimer": {
              "timeParam": "onChangeLeaderFollowPos",
              "timePeriod": [10.0,12.5]
            }
          },
          "periodicTimer": {
            "timeParam": "onChangeLeaderFollowPos",
            "timePeriod": [30.0,40.0]
          }
        }
      },
      {
        "orderedSelector": {
          "sequencer": {
            "findPointInCapzone": {
              "posParam": "regroupPosition"
            },
            "resetNearCapzone": []
          },
          "findPointNearCapzone": {
            "posParam": "regroupPosition"
          }
        }
      }
    ]
  },
  {
    "sequencer": {
      "name": "sub.updateRegroupPosTrain",
      "isLeader": [],
      "getPointInTrainCapzone": {
        "posParam": "regroupPosition"
      }
    }
  },
  {
    "sequencer": {
      "name": "sub.popFromCoverAttackCover",
      "getTime": {
        "to": "fastReactTime"
      },
      "getCoverPosAndDir": {
        "coverIndexParam": "coverAttackCover",
        "coverSlotParam": "coverAttackCoverSlot"
      },
      "rotateToPoint": {
        "posParam": "coverLookPos"
      },
      "setIntVar": {
        "to": "coverAttack",
        "value": 2
      },
      "chooseMinMaxStancesForCoverAttack": [],
      "changeStanceForCoverAttack": {
        "hide": false
      },
      "orderedSelector": [
        {
          "sequencer": {
            "isVarsIntEqual": {
              "lhs": "coverAttackType",
              "rhs_value": 4
            },
            "getCoverPosAndDir": {
              "coverIndexParam": "coverAttackCover",
              "coverSlotParam": "coverAttackCoverSlot",
              "outLeftPosParam": "coverWalkPos"
            },
            "moveByDir": {
              "endPos": "coverWalkPos",
              "duration": 2.5,
              "distThresholsd": 0.1,
              "lookPosParam": "coverLookPos"
            },
            "rotateToPoint": {
              "posParam": "coverLookPos"
            }
          }
        },
        {
          "sequencer": {
            "isVarsIntEqual": {
              "lhs": "coverAttackType",
              "rhs_value": 5
            },
            "getCoverPosAndDir": {
              "coverIndexParam": "coverAttackCover",
              "coverSlotParam": "coverAttackCoverSlot",
              "outRightPosParam": "coverWalkPos"
            },
            "moveByDir": {
              "endPos": "coverWalkPos",
              "duration": 2.5,
              "distThresholsd": 0.1,
              "lookPosParam": "coverLookPos"
            },
            "rotateToPoint": {
              "posParam": "coverLookPos"
            }
          }
        },
        {
          "continue": []
        }
      ],
      "wait": {
        "range": [0.1,0.2],
        "resetable": true
      }
    }
  },
  {
    "sequencer": [
      {
        "name": "sub.hideToCoverAttackCover"
      },
      {
        "setIntVar": {
          "to": "minStance",
          "value": 2
        }
      },
      {
        "setIntVar": {
          "to": "maxStance",
          "value": 2
        }
      },
      {
        "setIntVar": {
          "to": "coverAttack",
          "value": 1
        }
      },
      {
        "getTime": {
          "to": "fastReactTime"
        }
      },
      {
        "changeStance": {
          "stanceName": "stand",
          "maxStanceParam": "maxStance"
        }
      },
      {
        "orderedSelector": {
          "moveToPos": {
            "posParam": "coverPos",
            "sprintTimerRange": [10.0,20.0],
            "minDistToSprint": 0.0,
            "distThreshold": 0.3,
            "avoidAiObstacles": false,
            "timeToStuck": 0.3
          },
          "moveByDir": {
            "endPos": "coverPos",
            "duration": 1.5,
            "distThreshold": 0.3
          }
        }
      },
      {
        "rotateToPoint": {
          "posParam": "coverLookPos"
        }
      },
      {
        "chooseMinMaxStancesForCoverAttack": []
      },
      {
        "changeStanceForCoverAttack": {
          "hide": true
        }
      },
      {
        "wait": {
          "range": [0.5,0.7],
          "resetable": true
        }
      },
      {
        "wait": {
          "range": [0.1,0.2],
          "resetable": true
        }
      },
      {
        "decreaseDangerLevel": {
          "paramName": "dangerLevel",
          "decreaseCoef": 0.1
        }
      }
    ]
  },
  {
    "sequencer": {
      "name": "sub.trySkipMoveForStationaryGun",
      "not": {
        "subTree": {
          "name": "",
          "treeName": "sub.regroupCheck"
        }
      },
      "hasStationaryGunAssigned": {
        "gunEidParam": "lastStGunEid"
      }
    }
  },
  {
    "sequencer": [
      {
        "name": "sub.tryAttachToStationaryGun"
      },
      {
        "assignStationaryGun": {
          "gunEidParam": "lastStGunEid",
          "assignForTime": 5.0
        }
      },
      {
        "orderedSelector": {
          "attachToStationaryGun": {
            "gunEidParam": "lastStGunEid"
          },
          "sequencer": {
            "blacklistStationaryGun": {
              "gunEidParam": "lastStGunEid"
            },
            "break": []
          }
        }
      },
      {
        "orderedSelector": {
          "isAttachedToStationaryGun": {
            "gunEidParam": "lastStGunEid"
          },
          "sequencer": {
            "blacklistStationaryGun": {
              "gunEidParam": "lastStGunEid"
            },
            "break": []
          }
        }
      },
      {
        "wait": {
          "range": [0.2,0.2],
          "resetable": true
        }
      }
    ]
  },
  {
    "sequencer": [
      {
        "name": "sub.tryStandByStationaryGun"
      },
      {
        "checkAtTime": {
          "timeParam": "lastStGunTimeWait",
          "range": [5.0,1000000.0]
        }
      },
      {
        "getTime": {
          "to": "lastStGunTimeWait"
        }
      },
      {
        "isAgentPlayerBot": []
      },
      {
        "not": {
          "isLeader": []
        }
      },
      {
        "not": {
          "isAllyPlayerNear": []
        }
      },
      {
        "isReadyForAction": []
      },
      {
        "isVarsIntEqual": {
          "lhs": "coverAttack",
          "rhs_value": 0
        }
      },
      {
        "orderedSelector": {
          "hasStationaryGunAssigned": {
            "gunEidParam": "lastStGunEid"
          },
          "findStationaryGun": {
            "radius": 10.0,
            "posOffset": [0.0,-0.5,0.5],
            "gunEidOutParam": "lastStGunEid",
            "extraChecks": true,
            "rangeAITypes": [1,1],
            "requireTargets": 0,
            "requireEnemySide": true
          }
        }
      },
      {
        "orderedSelector": {
          "isAttachedToStationaryGun": {
            "gunEidParam": "lastStGunEid"
          },
          "sequencer": {
            "assignStationaryGun": {
              "gunEidParam": "lastStGunEid",
              "assignForTime": 5.0
            },
            "moveToPos": {
              "posParam": "lastStGunPos",
              "sprintTimerRange": [5.0,10.0]
            },
            "rotateToPoint": {
              "posParam": "lastStGunLookPos",
              "aimSpeedCoef": 0.5
            },
            "subTree": {
              "name": "",
              "treeName": "sub.tryAttachToStationaryGun"
            }
          }
        }
      },
      {
        "orderedSelector": {
          "not": {
            "isAllyPlayerNear": []
          },
          "sequencer": {
            "detachFromStationaryGun": [],
            "wait": {
              "range": [0.2,0.2],
              "resetable": true
            },
            "break": []
          }
        }
      },
      {
        "orderedSelector": {
          "not": {
            "isAllyPlayerNear": []
          },
          "sequencer": {
            "detachFromStationaryGun": [],
            "wait": {
              "range": [0.2,0.2],
              "resetable": true
            },
            "break": []
          }
        }
      },
      {
        "orderedSelector": {
          "not": {
            "isAllyPlayerNear": []
          },
          "sequencer": {
            "detachFromStationaryGun": [],
            "wait": {
              "range": [0.2,0.2],
              "resetable": true
            },
            "break": []
          }
        }
      },
      {
        "orderedSelector": {
          "not": {
            "isAllyPlayerNear": []
          },
          "sequencer": {
            "detachFromStationaryGun": [],
            "wait": {
              "range": [0.2,0.2],
              "resetable": true
            },
            "break": []
          }
        }
      },
      {
        "orderedSelector": {
          "not": {
            "isAllyPlayerNear": []
          },
          "sequencer": {
            "detachFromStationaryGun": [],
            "wait": {
              "range": [0.2,0.2],
              "resetable": true
            },
            "break": []
          }
        }
      },
      {
        "orderedSelector": {
          "not": {
            "isAllyPlayerNear": []
          },
          "sequencer": {
            "detachFromStationaryGun": [],
            "wait": {
              "range": [0.2,0.2],
              "resetable": true
            },
            "break": []
          }
        }
      },
      {
        "getStationaryGunInfo": {
          "gunEidParam": "lastStGunEid",
          "posOffset": [0.0,-0.5,0.5],
          "posOutParam": "lastStGunPos",
          "lookPosOutParam": "lastStGunLookPos",
          "lookRandYawRange": [0.0,0.0],
          "lookRandPitchRange": [0.0,0.0]
        }
      },
      {
        "getStationaryGunInfo": {
          "gunEidParam": "lastStGunEid",
          "posOffset": [0.0,-0.5,0.5],
          "lookPosOutParam": "lastStGunLookPos",
          "lookRandYawRange": [-0.7,-0.3],
          "lookRandPitchRange": [-0.2,0.0]
        }
      },
      {
        "getStationaryGunInfo": {
          "gunEidParam": "lastStGunEid",
          "posOffset": [0.0,-0.5,0.5],
          "lookPosOutParam": "lastStGunLookPos",
          "lookRandYawRange": [-0.6,0.0],
          "lookRandPitchRange": [-0.2,-0.05]
        }
      },
      {
        "getStationaryGunInfo": {
          "gunEidParam": "lastStGunEid",
          "posOffset": [0.0,-0.5,0.5],
          "lookPosOutParam": "lastStGunLookPos",
          "lookRandYawRange": [-0.5,0.5],
          "lookRandPitchRange": [-0.2,-0.05]
        }
      },
      {
        "getStationaryGunInfo": {
          "gunEidParam": "lastStGunEid",
          "posOffset": [0.0,-0.5,0.5],
          "lookPosOutParam": "lastStGunLookPos",
          "lookRandYawRange": [0.0,0.6],
          "lookRandPitchRange": [-0.2,-0.05]
        }
      },
      {
        "getStationaryGunInfo": {
          "gunEidParam": "lastStGunEid",
          "posOffset": [0.0,-0.5,0.5],
          "lookPosOutParam": "lastStGunLookPos",
          "lookRandYawRange": [0.3,0.7],
          "lookRandPitchRange": [-0.2,-0.05]
        }
      },
      {
        "getStationaryGunInfo": {
          "gunEidParam": "lastStGunEid",
          "posOffset": [0.0,-0.5,0.5],
          "lookPosOutParam": "lastStGunLookPos",
          "lookRandYawRange": [-0.5,0.5],
          "lookRandPitchRange": [-0.2,-0.05]
        }
      },
      {
        "getStationaryGunInfo": {
          "gunEidParam": "lastStGunEid",
          "posOffset": [0.0,-0.5,0.5],
          "lookPosOutParam": "lastStGunLookPos",
          "lookRandYawRange": [-0.7,0.7],
          "lookRandPitchRange": [-0.2,-0.05]
        }
      },
      {
        "getStationaryGunInfo": {
          "gunEidParam": "lastStGunEid",
          "posOffset": [0.0,-0.5,0.5],
          "lookPosOutParam": "lastStGunLookPos",
          "lookRandYawRange": [-0.3,0.3],
          "lookRandPitchRange": [-0.3,0.1]
        }
      },
      {
        "assignStationaryGun": {
          "gunEidParam": "lastStGunEid",
          "assignForTime": 5.0
        }
      },
      {
        "assignStationaryGun": {
          "gunEidParam": "lastStGunEid",
          "assignForTime": 5.0
        }
      },
      {
        "assignStationaryGun": {
          "gunEidParam": "lastStGunEid",
          "assignForTime": 5.0
        }
      },
      {
        "assignStationaryGun": {
          "gunEidParam": "lastStGunEid",
          "assignForTime": 5.0
        }
      },
      {
        "assignStationaryGun": {
          "gunEidParam": "lastStGunEid",
          "assignForTime": 5.0
        }
      },
      {
        "assignStationaryGun": {
          "gunEidParam": "lastStGunEid",
          "assignForTime": 5.0
        }
      },
      {
        "assignStationaryGun": {
          "gunEidParam": "lastStGunEid",
          "assignForTime": 5.0
        }
      },
      {
        "assignStationaryGun": {
          "gunEidParam": "lastStGunEid",
          "assignForTime": 5.0
        }
      },
      {
        "assignStationaryGun": {
          "gunEidParam": "lastStGunEid",
          "assignForTime": 5.0
        }
      },
      {
        "assignStationaryGun": {
          "gunEidParam": "lastStGunEid",
          "assignForTime": 5.0
        }
      },
      {
        "wait": {
          "range": [1.0,2.0],
          "resetable": true
        }
      },
      {
        "wait": {
          "range": [1.0,2.0],
          "resetable": true
        }
      },
      {
        "wait": {
          "range": [1.0,2.0],
          "resetable": true
        }
      },
      {
        "wait": {
          "range": [1.0,2.0],
          "resetable": true
        }
      },
      {
        "wait": {
          "range": [1.0,2.0],
          "resetable": true
        }
      },
      {
        "wait": {
          "range": [1.0,2.0],
          "resetable": true
        }
      },
      {
        "wait": {
          "range": [2.0,3.0],
          "resetable": true
        }
      },
      {
        "wait": {
          "range": [1.0,2.0],
          "resetable": true
        }
      },
      {
        "wait": {
          "range": [1.0,1.0],
          "resetable": true
        }
      },
      {
        "wait": {
          "range": [0.2,0.2],
          "resetable": true
        }
      },
      {
        "rotateToPoint": {
          "posParam": "lastStGunLookPos",
          "aimSpeedCoef": 0.07,
          "aimViscosityCoef": 0.5
        }
      },
      {
        "rotateToPoint": {
          "posParam": "lastStGunLookPos",
          "aimSpeedCoef": 0.06,
          "aimViscosityCoef": 0.2
        }
      },
      {
        "rotateToPoint": {
          "posParam": "lastStGunLookPos",
          "aimSpeedCoef": 0.05,
          "aimViscosityCoef": 0.1
        }
      },
      {
        "rotateToPoint": {
          "posParam": "lastStGunLookPos",
          "aimSpeedCoef": 0.06,
          "aimViscosityCoef": 0.1
        }
      },
      {
        "rotateToPoint": {
          "posParam": "lastStGunLookPos",
          "aimSpeedCoef": 0.05,
          "aimViscosityCoef": 0.1
        }
      },
      {
        "rotateToPoint": {
          "posParam": "lastStGunLookPos",
          "aimSpeedCoef": 0.06,
          "aimViscosityCoef": 0.1
        }
      },
      {
        "rotateToPoint": {
          "posParam": "lastStGunLookPos",
          "aimSpeedCoef": 0.07,
          "aimViscosityCoef": 0.1
        }
      },
      {
        "rotateToPoint": {
          "posParam": "lastStGunLookPos",
          "aimSpeedCoef": 0.1,
          "aimViscosityCoef": 0.5
        }
      },
      {
        "detachFromStationaryGun": []
      }
    ]
  },
  {
    "sequencer": [
      {
        "name": "sub.tryBeginAttackWithStationaryGun"
      },
      {
        "checkAtTime": {
          "timeParam": "lastStGunTimeAttack",
          "range": [2.0,1000000.0]
        }
      },
      {
        "getTime": {
          "to": "lastStGunTimeAttack"
        }
      },
      {
        "isAgentPlayerBot": []
      },
      {
        "not": {
          "isLeader": []
        }
      },
      {
        "not": {
          "isAllyPlayerNear": []
        }
      },
      {
        "isReadyForAction": []
      },
      {
        "isVarsIntEqual": {
          "lhs": "coverAttack",
          "rhs_value": 0
        }
      },
      {
        "checkTarget": {
          "targetUnitParam": "shootEnemy"
        }
      },
      {
        "findStationaryGun": {
          "radius": 10.0,
          "posOffset": [0.0,-0.5,0.5],
          "gunEidOutParam": "lastStGunEid",
          "extraChecks": true,
          "rangeAITypes": [1,2],
          "targetEidParam": "shootEnemy"
        }
      },
      {
        "setIntVar": {
          "to": "dangerNearbyBeware",
          "value": 1
        }
      },
      {
        "sequencer": [
          {
            "reaction": {
              "event": "regularCheck",
              "findObstaclesAlongsidePath": []
            }
          },
          {
            "reaction": {
              "event": "onEnemyPlayerNear",
              "continue": []
            }
          },
          {
            "reaction": {
              "event": "onTraceableDanger",
              "continue": []
            }
          },
          {
            "reaction": {
              "event": "onBulletNearby",
              "continue": []
            }
          },
          {
            "assignStationaryGun": {
              "gunEidParam": "lastStGunEid",
              "assignForTime": 5.0
            }
          },
          {
            "assignStationaryGun": {
              "gunEidParam": "lastStGunEid",
              "assignForTime": 5.0
            }
          },
          {
            "success": {
              "checkReloadWeapon": []
            }
          },
          {
            "success": {
              "shootAtUnit": {
                "targetUnitParam": "lastStGunEnemy",
                "shootCycles": 3,
                "minStance": 2,
                "maxStanceParam": "maxStance",
                "maxTime": [2.0,3.0],
                "cooldownTime": [0.0,0.1],
                "minAimTime": [0.2,0.3],
                "chooseStance": false
              }
            }
          },
          {
            "success": {
              "assignStationaryGun": {
                "gunEidParam": "lastStGunEid",
                "assignForTime": 5.0
              }
            }
          },
          {
            "success": {
              "shootAtUnit": {
                "targetUnitParam": "lastStGunEnemy",
                "shootCycles": 6,
                "minStance": 2,
                "maxStanceParam": "maxStance",
                "maxTime": [2.0,3.0],
                "cooldownTime": [0.3,0.5],
                "minAimTime": [0.2,0.3],
                "chooseStance": false
              }
            }
          },
          {
            "success": {
              "assignStationaryGun": {
                "gunEidParam": "lastStGunEid",
                "assignForTime": 5.0
              }
            }
          },
          {
            "success": {
              "shootAtUnit": {
                "targetUnitParam": "lastStGunEnemy",
                "shootCycles": 5,
                "minStance": 2,
                "maxStanceParam": "maxStance",
                "maxTime": [2.0,3.0],
                "cooldownTime": [0.3,0.5],
                "minAimTime": [0.2,0.3],
                "chooseStance": false
              }
            }
          },
          {
            "success": {
              "assignStationaryGun": {
                "gunEidParam": "lastStGunEid",
                "assignForTime": 5.0
              }
            }
          },
          {
            "getStationaryGunInfo": {
              "gunEidParam": "lastStGunEid",
              "posOffset": [0.0,-0.5,0.5],
              "posOutParam": "lastStGunPos",
              "lookPosOutParam": "lastStGunLookPos",
              "lookRandYawRange": [0.0,0.0],
              "lookRandPitchRange": [0.0,0.0]
            }
          },
          {
            "orderedSelector": {
              "isAttachedToStationaryGun": {
                "gunEidParam": "lastStGunEid"
              },
              "sequencer": {
                "assignStationaryGun": {
                  "gunEidParam": "lastStGunEid",
                  "assignForTime": 5.0
                },
                "moveToPos": {
                  "posParam": "lastStGunPos",
                  "sprintTimerRange": [1.5,20.0]
                },
                "rotateToPoint": {
                  "posParam": "lastStGunLookPos",
                  "aimSpeedCoef": 0.7
                },
                "subTree": {
                  "name": "",
                  "treeName": "sub.tryAttachToStationaryGun"
                }
              }
            }
          },
          {
            "orderedSelector": {
              "not": {
                "isAllyPlayerNear": []
              },
              "sequencer": {
                "detachFromStationaryGun": [],
                "wait": {
                  "range": [0.2,0.2],
                  "resetable": true
                },
                "break": []
              }
            }
          },
          {
            "orderedSelector": {
              "and": {
                "checkTarget": {
                  "targetUnitParam": "lastStGunEnemy"
                },
                "checkStationaryGunTarget": {
                  "gunEidParam": "lastStGunEid",
                  "targetEidParam": "lastStGunEnemy"
                }
              },
              "sequencer": {
                "detachFromStationaryGun": [],
                "wait": {
                  "range": [0.2,0.2],
                  "resetable": true
                },
                "break": []
              }
            }
          },
          {
            "orderedSelector": {
              "not": {
                "isAllyPlayerNear": []
              },
              "sequencer": {
                "detachFromStationaryGun": [],
                "wait": {
                  "range": [0.2,0.2],
                  "resetable": true
                },
                "break": []
              }
            }
          },
          {
            "orderedSelector": {
              "and": {
                "checkTarget": {
                  "targetUnitParam": "lastStGunEnemy"
                },
                "checkStationaryGunTarget": {
                  "gunEidParam": "lastStGunEid",
                  "targetEidParam": "lastStGunEnemy"
                }
              },
              "sequencer": {
                "detachFromStationaryGun": [],
                "wait": {
                  "range": [0.2,0.2],
                  "resetable": true
                },
                "break": []
              }
            }
          },
          {
            "copyIntVar": {
              "to": "lastStGunEnemy",
              "from": "shootEnemy"
            }
          },
          {
            "setPosFromEntity": {
              "to": "lastStGunLookPos",
              "from": "lastStGunEnemy"
            }
          },
          {
            "setPosFromEntity": {
              "to": "lastStGunLookPos",
              "from": "lastStGunEnemy"
            }
          },
          {
            "setPosFromEntity": {
              "to": "lastStGunLookPos",
              "from": "lastStGunEnemy"
            }
          },
          {
            "rotateToPoint": {
              "posParam": "lastStGunLookPos",
              "aimSpeedCoef": 0.2
            }
          },
          {
            "rotateToPoint": {
              "posParam": "lastStGunLookPos",
              "aimSpeedCoef": 0.3
            }
          },
          {
            "rotateToPoint": {
              "posParam": "lastStGunLookPos",
              "aimSpeedCoef": 0.5
            }
          },
          {
            "wait": {
              "range": [1.0,2.0],
              "resetable": true
            }
          },
          {
            "wait": {
              "range": [1.0,2.0],
              "resetable": true
            }
          },
          {
            "wait": {
              "range": [1.0,1.0],
              "resetable": true
            }
          },
          {
            "wait": {
              "range": [0.2,0.2],
              "resetable": true
            }
          },
          {
            "detachFromStationaryGun": []
          }
        ]
      }
    ]
  },
  {
    "sequencer": [
      {
        "name": "sub.tryContinueAttackWithStationaryGun"
      },
      {
        "hasStationaryGunAssigned": {
          "gunEidParam": "lastStGunEid"
        }
      },
      {
        "checkAtTime": {
          "timeParam": "lastStGunTimeAttack",
          "range": [3.0,1000000.0]
        }
      },
      {
        "getTime": {
          "to": "lastStGunTimeAttack"
        }
      },
      {
        "isAgentPlayerBot": []
      },
      {
        "not": {
          "isLeader": []
        }
      },
      {
        "not": {
          "isAllyPlayerNear": []
        }
      },
      {
        "isReadyForAction": []
      },
      {
        "isVarsIntEqual": {
          "lhs": "coverAttack",
          "rhs_value": 0
        }
      },
      {
        "orderedSelector": {
          "and": {
            "ignoreChance": {
              "chance": 0.9
            },
            "checkTarget": {
              "targetUnitParam": "lastStGunEnemy"
            },
            "checkStationaryGunTarget": {
              "gunEidParam": "lastStGunEid",
              "targetEidParam": "lastStGunEnemy"
            }
          },
          "findNextTargetForStationaryGun": {
            "gunEidParam": "lastStGunEid",
            "targetEidOutParam": "lastStGunEnemy"
          }
        }
      },
      {
        "setIntVar": {
          "to": "dangerNearbyBeware",
          "value": 1
        }
      },
      {
        "sequencer": [
          {
            "reaction": {
              "event": "regularCheck",
              "findObstaclesAlongsidePath": []
            }
          },
          {
            "reaction": {
              "event": "onEnemyPlayerNear",
              "continue": []
            }
          },
          {
            "reaction": {
              "event": "onTraceableDanger",
              "continue": []
            }
          },
          {
            "reaction": {
              "event": "onBulletNearby",
              "continue": []
            }
          },
          {
            "assignStationaryGun": {
              "gunEidParam": "lastStGunEid",
              "assignForTime": 5.0
            }
          },
          {
            "success": {
              "checkReloadWeapon": []
            }
          },
          {
            "success": {
              "shootAtUnit": {
                "targetUnitParam": "lastStGunEnemy",
                "shootCycles": 4,
                "minStance": 2,
                "maxStanceParam": "maxStance",
                "maxTime": [2.0,3.0],
                "cooldownTime": [0.0,0.1],
                "minAimTime": [0.2,0.3],
                "chooseStance": false
              }
            }
          },
          {
            "success": {
              "assignStationaryGun": {
                "gunEidParam": "lastStGunEid",
                "assignForTime": 5.0
              }
            }
          },
          {
            "success": {
              "shootAtUnit": {
                "targetUnitParam": "lastStGunEnemy",
                "shootCycles": 5,
                "minStance": 2,
                "maxStanceParam": "maxStance",
                "maxTime": [3.0,4.0],
                "cooldownTime": [0.3,0.5],
                "minAimTime": [0.2,0.3],
                "chooseStance": false
              }
            }
          },
          {
            "success": {
              "assignStationaryGun": {
                "gunEidParam": "lastStGunEid",
                "assignForTime": 5.0
              }
            }
          },
          {
            "success": {
              "shootAtUnit": {
                "targetUnitParam": "lastStGunEnemy",
                "shootCycles": 6,
                "minStance": 2,
                "maxStanceParam": "maxStance",
                "maxTime": [2.0,3.0],
                "cooldownTime": [0.3,0.5],
                "minAimTime": [0.2,0.3],
                "chooseStance": false
              }
            }
          },
          {
            "success": {
              "assignStationaryGun": {
                "gunEidParam": "lastStGunEid",
                "assignForTime": 5.0
              }
            }
          },
          {
            "getStationaryGunInfo": {
              "gunEidParam": "lastStGunEid",
              "posOffset": [0.0,-0.5,0.5],
              "posOutParam": "lastStGunPos",
              "lookPosOutParam": "lastStGunLookPos",
              "lookRandYawRange": [0.0,0.0],
              "lookRandPitchRange": [0.3,0.5]
            }
          },
          {
            "orderedSelector": {
              "isAttachedToStationaryGun": {
                "gunEidParam": "lastStGunEid"
              },
              "sequencer": {
                "assignStationaryGun": {
                  "gunEidParam": "lastStGunEid",
                  "assignForTime": 5.0
                },
                "moveToPos": {
                  "posParam": "lastStGunPos",
                  "sprintTimerRange": [1.0,20.0]
                },
                "rotateToPoint": {
                  "posParam": "lastStGunLookPos",
                  "aimSpeedCoef": 0.2
                },
                "subTree": {
                  "name": "",
                  "treeName": "sub.tryAttachToStationaryGun"
                }
              }
            }
          },
          {
            "orderedSelector": {
              "not": {
                "isAllyPlayerNear": []
              },
              "sequencer": {
                "detachFromStationaryGun": [],
                "wait": {
                  "range": [0.2,0.2],
                  "resetable": true
                },
                "break": []
              }
            }
          },
          {
            "orderedSelector": {
              "and": {
                "ignoreChance": {
                  "chance": 0.1
                },
                "checkTarget": {
                  "targetUnitParam": "lastStGunEnemy"
                },
                "checkStationaryGunTarget": {
                  "gunEidParam": "lastStGunEid",
                  "targetEidParam": "lastStGunEnemy"
                }
              },
              "findNextTargetForStationaryGun": {
                "gunEidParam": "lastStGunEid",
                "targetEidOutParam": "lastStGunEnemy"
              },
              "sequencer": {
                "detachFromStationaryGun": [],
                "wait": {
                  "range": [0.2,0.2],
                  "resetable": true
                },
                "break": []
              }
            }
          },
          {
            "orderedSelector": {
              "not": {
                "isAllyPlayerNear": []
              },
              "sequencer": {
                "detachFromStationaryGun": [],
                "wait": {
                  "range": [0.2,0.2],
                  "resetable": true
                },
                "break": []
              }
            }
          },
          {
            "orderedSelector": {
              "and": {
                "ignoreChance": {
                  "chance": 0.3
                },
                "checkTarget": {
                  "targetUnitParam": "lastStGunEnemy"
                },
                "checkStationaryGunTarget": {
                  "gunEidParam": "lastStGunEid",
                  "targetEidParam": "lastStGunEnemy"
                }
              },
              "findNextTargetForStationaryGun": {
                "gunEidParam": "lastStGunEid",
                "targetEidOutParam": "lastStGunEnemy"
              },
              "sequencer": {
                "detachFromStationaryGun": [],
                "wait": {
                  "range": [0.2,0.2],
                  "resetable": true
                },
                "break": []
              }
            }
          },
          {
            "setPosFromEntity": {
              "to": "lastStGunLookPos",
              "from": "lastStGunEnemy"
            }
          },
          {
            "setPosFromEntity": {
              "to": "lastStGunLookPos",
              "from": "lastStGunEnemy"
            }
          },
          {
            "setPosFromEntity": {
              "to": "lastStGunLookPos",
              "from": "lastStGunEnemy"
            }
          },
          {
            "rotateToPoint": {
              "posParam": "lastStGunLookPos",
              "aimSpeedCoef": 0.4
            }
          },
          {
            "rotateToPoint": {
              "posParam": "lastStGunLookPos",
              "aimSpeedCoef": 0.5
            }
          },
          {
            "rotateToPoint": {
              "posParam": "lastStGunLookPos",
              "aimSpeedCoef": 0.4
            }
          },
          {
            "wait": {
              "range": [0.2,0.9],
              "resetable": true
            }
          },
          {
            "wait": {
              "range": [0.3,1.1],
              "resetable": true
            }
          },
          {
            "wait": {
              "range": [0.2,0.9],
              "resetable": true
            }
          },
          {
            "wait": {
              "range": [0.2,0.2],
              "resetable": true
            }
          },
          {
            "detachFromStationaryGun": []
          }
        ]
      }
    ]
  },
  {
    "orderedSelector": {
      "name": "sub.tryToOpenDoors",
      "findObstaclesAlongsidePath": []
    }
  },
  {
    "orderedSelector": [
      {
        "name": "sub.tryToSaveOrFindCover"
      },
      {
        "subTree": {
          "name": "",
          "refId": "checkCoverRef"
        }
      },
      {
        "subTree": {
          "name": "",
          "refId": "findCoverRef"
        }
      }
    ]
  },
  {
    "orderedSelector": [
      {
        "name": "sub.checkEndCoverAttack"
      },
      {
        "isVarsIntEqual": {
          "lhs": "coverAttack",
          "rhs_value": 0
        }
      },
      {
        "sequencer": {
          "checkCoverForCoverAttack": [],
          "checkAtTime": {
            "timeParam": "coverAttackEnemyTime",
            "range": [0.0,5.0]
          },
          "success": {
            "sequencer": {
              "checkTargetTraceable": {
                "targetParam": "coverAttackEnemy"
              },
              "getTime": {
                "to": "coverAttackEnemyTime"
              }
            }
          }
        }
      },
      {
        "sequencer": [
          {
            "success": {
              "ignoreCover": {
                "coverIndexParam": "coverAttackCover",
                "coverSlotParam": "coverAttackCoverSlot",
                "timeIgnore": [8.0,16.0]
              }
            }
          },
          {
            "setIntVar": {
              "to": "coverAttack",
              "value": 0
            }
          },
          {
            "setIntVar": {
              "to": "coverAttackType",
              "value": 0
            }
          },
          {
            "setIntVar": {
              "to": "coverAttackCover",
              "value": -1
            }
          },
          {
            "setIntVar": {
              "to": "coverAttackCoverSlot",
              "value": 0
            }
          },
          {
            "setIntVar": {
              "to": "coverAttackEnemy",
              "value": 0
            }
          },
          {
            "setRealVar": {
              "to": "coverAttackEnemyTime",
              "value": 0.0
            }
          },
          {
            "wait": {
              "range": [0.1,0.2],
              "resetable": true
            }
          }
        ]
      }
    ]
  },
  {
    "orderedSelector": [
      {
        "name": "sub.tryBeginCoverAttack"
      },
      {
        "not": {
          "isVarsIntEqual": {
            "lhs": "coverAttack",
            "rhs_value": 0
          }
        }
      },
      {
        "not": {
          "sequencer": [
            {
              "reaction": {
                "event": "regularCheck",
                "findObstaclesAlongsidePath": []
              }
            },
            {
              "reaction": {
                "event": "onEnemyPlayerNear",
                "orderedSelector": [
                  {
                    "sequencer": {
                      "findDanger": {
                        "paramName": "meleeEnemy",
                        "radiusParamName": "enemyMeleeRadius",
                        "minDanger": 0.5,
                        "tag": "human"
                      },
                      "decreaseDangerLevel": {
                        "paramName": "dangerLevel",
                        "decreaseCoef": 0.1
                      },
                      "setIntVar": {
                        "to": "coverAttack",
                        "value": 0
                      },
                      "recalculateTree": []
                    }
                  },
                  {
                    "sequencer": {
                      "findDanger": {
                        "paramName": "reactShootEnemy",
                        "radiusParamName": "enemyNearRadius",
                        "minDanger": 0.5,
                        "tag": "human"
                      },
                      "orderedSelector": [
                        {
                          "sequencer": {
                            "isVarsIntEqual": {
                              "lhs": "reactShootEnemy",
                              "rhs": "shootEnemy"
                            },
                            "setRealVar": {
                              "to": "enemyCloseRadius",
                              "value": 7.0
                            },
                            "not": {
                              "findDanger": {
                                "paramName": "closeEnemy",
                                "radiusParamName": "enemyCloseRadius",
                                "minDanger": 0.5,
                                "tag": "human"
                              }
                            }
                          }
                        },
                        {
                          "sequencer": {
                            "decreaseDangerLevel": {
                              "paramName": "dangerLevel",
                              "decreaseCoef": 0.1
                            },
                            "setIntVar": {
                              "to": "coverAttack",
                              "value": 0
                            },
                            "recalculateTree": []
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "reaction": {
                "event": "onTraceableDanger",
                "continue": []
              }
            },
            {
              "reaction": {
                "event": "onBulletNearby",
                "continue": []
              }
            },
            {
              "getRegroupPos": {
                "posParam": "regroupPosition"
              }
            },
            {
              "findCoverForCoverAttack": {
                "targetParam": "shootEnemy",
                "approachPosParam": "regroupPosition"
              }
            },
            {
              "wait": {
                "range": [0.1,0.2],
                "resetable": true
              }
            },
            {
              "wait": {
                "range": [0.1,0.2],
                "resetable": true
              }
            },
            {
              "getCoverPosAndDir": {
                "coverIndexParam": "coverAttackCover",
                "coverSlotParam": "coverAttackCoverSlot",
                "outPosParam": "coverPos"
              }
            },
            {
              "setIntVar": {
                "to": "minStance",
                "value": 2
              }
            },
            {
              "setIntVar": {
                "to": "maxStance",
                "value": 2
              }
            },
            {
              "setIntVar": {
                "to": "coverAttack",
                "value": 1
              }
            },
            {
              "setIntVar": {
                "to": "dangerNearbyBeware",
                "value": 1
              }
            },
            {
              "changeStance": {
                "stanceName": "stand",
                "maxStanceParam": "maxStance"
              }
            },
            {
              "orderedSelector": {
                "not": {
                  "passedTimeSinceControlledByPlayer": {
                    "time": 15.0
                  }
                },
                "checkReloadWeapon": {
                  "waitReloadFinish": false
                }
              }
            },
            {
              "orderedSelector": {
                "moveToPos": {
                  "posParam": "coverPos",
                  "sprintTimerRange": [10.0,20.0],
                  "minDistToSprint": 0.0,
                  "distThreshold": 0.3,
                  "avoidAiObstacles": false,
                  "timeToStuck": 0.3
                },
                "continue": []
              }
            },
            {
              "setPosFromEntity": {
                "to": "coverLookPos",
                "from": "shootEnemy"
              }
            },
            {
              "rotateToPoint": {
                "posParam": "coverLookPos"
              }
            },
            {
              "copyIntVar": {
                "to": "coverAttackEnemy",
                "from": "shootEnemy"
              }
            },
            {
              "getTime": {
                "to": "coverAttackEnemyTime"
              }
            },
            {
              "chooseMinMaxStancesForCoverAttack": []
            },
            {
              "changeStanceForCoverAttack": {
                "hide": true
              }
            },
            {
              "decreaseDangerLevel": {
                "paramName": "dangerLevel",
                "decreaseCoef": 0.1
              }
            }
          ]
        }
      },
      {
        "isVarsRealLess": {
          "lhs": "dangerLevel",
          "rhs_value": 0.9
        }
      }
    ]
  },
  {
    "orderedSelector": [
      {
        "name": "sub.performCoverAttackMoves"
      },
      {
        "sequencer": {
          "isVarsIntEqual": {
            "lhs": "coverAttack",
            "rhs_value": 1
          },
          "wait": {
            "range": [0.3,0.5],
            "resetable": true
          },
          "orderedSelector": [
            {
              "sequencer": [
                {
                  "reaction": {
                    "event": "regularCheck",
                    "findObstaclesAlongsidePath": []
                  }
                },
                {
                  "reaction": {
                    "event": "onEnemyPlayerNear",
                    "continue": []
                  }
                },
                {
                  "reaction": {
                    "event": "onTraceableDanger",
                    "continue": []
                  }
                },
                {
                  "reaction": {
                    "event": "onBulletNearby",
                    "continue": []
                  }
                },
                {
                  "getCoverPosAndDir": {
                    "coverIndexParam": "coverAttackCover",
                    "coverSlotParam": "coverAttackCoverSlot",
                    "outPosParam": "coverPos"
                  }
                },
                {
                  "orderedSelector": {
                    "checkDistance": {
                      "posParam": "coverPos",
                      "radius": 1.0,
                      "yRadius": 1.0
                    },
                    "subTree": {
                      "treeName": "sub.hideToCoverAttackCover"
                    }
                  }
                },
                {
                  "orderedSelector": {
                    "ignoreChance": {
                      "chance": 0.3
                    },
                    "wait": {
                      "range": [0.1,0.5],
                      "resetable": true
                    }
                  }
                },
                {
                  "orderedSelector": {
                    "checkTargetTraceable": {
                      "targetParam": "coverAttackEnemy"
                    },
                    "ignoreChance": {
                      "chance": 0.5
                    },
                    "failed": {
                      "sequencer": [
                        {
                          "increaseDangerLevel": {
                            "paramName": "dangerLevel",
                            "targetParam": "coverAttackEnemy"
                          }
                        },
                        {
                          "increaseDangerLevel": {
                            "paramName": "dangerLevel",
                            "targetParam": "coverAttackEnemy"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "checkReloadWeapon": []
                },
                {
                  "wait": {
                    "range": [0.3,0.5],
                    "resetable": true
                  }
                },
                {
                  "subTree": {
                    "treeName": "sub.popFromCoverAttackCover"
                  }
                },
                {
                  "ifThenElse": {
                    "and": {
                      "checkTooManyEnemiesWatching": [],
                      "ignoreChance": {
                        "chance": 0.5
                      }
                    },
                    "sequencer": {
                      "increaseDangerLevel": {
                        "paramName": "dangerLevel",
                        "targetParam": "coverAttackEnemy"
                      },
                      "subTree": {
                        "treeName": "sub.hideToCoverAttackCover"
                      },
                      "wait": {
                        "range": [0.5,1.0],
                        "resetable": true
                      },
                      "break": []
                    },
                    "continue": []
                  }
                },
                {
                  "checkTarget": {
                    "targetUnitParam": "coverAttackEnemy"
                  }
                },
                {
                  "setPosFromEntity": {
                    "to": "coverLookPos",
                    "from": "coverAttackEnemy"
                  }
                },
                {
                  "setIntVar": {
                    "to": "coverAttack",
                    "value": 2
                  }
                },
                {
                  "setIntVar": {
                    "to": "dangerNearbyBeware",
                    "value": 1
                  }
                },
                {
                  "getTime": {
                    "to": "coverAttackEnemyTime"
                  }
                }
              ]
            },
            {
              "sequencer": [
                {
                  "ignoreCover": {
                    "coverIndexParam": "coverAttackCover",
                    "coverSlotParam": "coverAttackCoverSlot",
                    "timeIgnore": [8.0,16.0]
                  }
                },
                {
                  "decreaseDangerLevel": {
                    "paramName": "dangerLevel",
                    "decreaseCoef": 0.1
                  }
                },
                {
                  "setIntVar": {
                    "to": "dangerNearbyBeware",
                    "value": 1
                  }
                },
                {
                  "setIntVar": {
                    "to": "coverAttack",
                    "value": 0
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "sequencer": [
          {
            "isVarsIntEqual": {
              "lhs": "coverAttack",
              "rhs_value": 2
            }
          },
          {
            "orderedSelector": {
              "checkTarget": {
                "targetUnitParam": "coverAttackEnemy"
              },
              "not": {
                "sequencer": {
                  "not": {
                    "ignoreChance": {
                      "chance": 0.1
                    }
                  },
                  "ignoreCover": {
                    "coverIndexParam": "coverAttackCover",
                    "coverSlotParam": "coverAttackCoverSlot",
                    "timeIgnore": [8.0,16.0]
                  }
                }
              },
              "failed": {
                "sequencer": {
                  "setIntVar": {
                    "to": "coverAttack",
                    "value": 0
                  },
                  "decreaseDangerLevel": {
                    "paramName": "dangerLevel",
                    "decreaseCoef": 0.1
                  }
                }
              }
            }
          },
          {
            "orderedSelector": {
              "not": {
                "orderedSelector": {
                  "checkReloadWeapon": {
                    "checkOnly": true
                  },
                  "not": {
                    "isVarsRealLess": {
                      "lhs": "dangerLevel",
                      "rhs_value": 0.9
                    }
                  }
                }
              },
              "sequencer": {
                "subTree": {
                  "treeName": "sub.hideToCoverAttackCover"
                },
                "wait": {
                  "range": [0.1,0.2],
                  "resetable": true
                },
                "break": []
              }
            }
          },
          {
            "getTime": {
              "to": "coverAttackEnemyTime"
            }
          },
          {
            "setIntVar": {
              "to": "dangerNearbyBeware",
              "value": 1
            }
          }
        ]
      },
      {
        "continue": []
      }
    ]
  },
  {
    "repeatUntilFail": {
      "name": "sub.finishBuildTarget",
      "count": 1,
      "checkTarget": {
        "targetUnitParam": "buildTarget",
        "ignoreDead": false
      },
      "findPointNearTarget": {
        "posParam": "buildPosition",
        "dist": [2.0,2.5],
        "targetParam": "buildTarget",
        "traceTarget": false,
        "reusePrevPos": false
      },
      "moveToPos": {
        "posParam": "buildPosition",
        "sprintTimerRange": [10.0,20.0],
        "minDistToSprint": 4.0,
        "distThreshold": 0.5,
        "avoidAiObstacles": false,
        "incLadders": true
      },
      "changeStance": {
        "stanceName": "crouch",
        "maxStanceParam": "maxStance"
      },
      "wait": {
        "range": [1.0,1.0],
        "resetable": true
      },
      "parallel": {
        "lookAtTarget": {
          "targetUnitParam": "buildTarget",
          "rotateBody": true,
          "allowDead": true
        },
        "interactWithBuildingTarget": {
          "targetUnitParam": "buildTarget"
        }
      }
    }
  },
  {
    "cycle": {
      "name": "sub.cycleCheckAllowedPos",
      "orderedSelector": [
        {
          "sequencer": {
            "getAgentAIPos": {
              "outPosParam": "checkPos"
            },
            "checkAllowedPosition": {
              "posParam": "checkPos"
            }
          }
        },
        {
          "sequencer": {
            "changeStance": {
              "stanceName": "crouch"
            },
            "orderedSelector": {
              "checkAtTime": {
                "timeParam": "avoidLeaderSightTime",
                "range": [0.0,5.0]
              },
              "sequencer": {
                "getTime": {
                  "to": "avoidLeaderSightTime"
                },
                "break": []
              }
            }
          }
        }
      ]
    }
  }
]